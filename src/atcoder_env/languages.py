"""
generated by codegen.py
"""

import hashlib
from dataclasses import dataclass
from textwrap import dedent
from typing import Optional


@dataclass
class Language:
    name: str
    display_name: str
    processor_name: str
    version: str
    filename: str
    install_command: str
    compilation_command: str
    object_file: Optional[str]
    environment: dict[str, str]
    execution_command: list[str]

    @property
    def id(self) -> str:
        return (
            f"{self.name} {self.processor_name} {self.version}".replace(" ", "-")
            .replace("/", "-")
            .lower()
        )

    @property
    def tag_name(self) -> str:
        return hashlib.md5(self.id.encode()).hexdigest()[:8]

    @property
    def display_id(self) -> str:
        return f"{self.display_name} ({self.processor_name} {self.version})"


def strip(string: str) -> str:
    return string.strip()


def process(raw_command: str) -> list[str]:
    return dedent(raw_command)[1:-1].splitlines()


def get_language(name: str) -> Language:
    for language in languages:
        if language.name == name:
            return language
    raise ValueError(f'Language "{name}" not found')


languages = [
    Language(
        "Rust",
        "Rust",
        "rustc",
        "1.70.0",
        "src/main.rs",
        dedent(
            """
                # Generated by https://github.com/rust-lang-ja/atcoder-proposal/tree/fe6aa6179d074d3a565d3c3db256db54071a38f9

                set -e

                sudo apt-get install -y --no-install-recommends build-essential ca-certificates curl

                rust_version=1.70.0

                # https://forge.rust-lang.org/infra/other-installation-methods.html#standalone-installers
                curl \"https://static.rust-lang.org/dist/rust-$rust_version-x86_64-unknown-linux-gnu.tar.gz\" -fO --output-dir /tmp
                tar xvf \"/tmp/rust-$rust_version-x86_64-unknown-linux-gnu.tar.gz\" -C /tmp
                sudo \"/tmp/rust-$rust_version-x86_64-unknown-linux-gnu/install.sh\"

                cargo -vV
                [ \"$(command -v cargo)\" = /usr/local/bin/cargo ]
                [ \"$(cargo -vV | sed -n 's/release: \\(.*\\)/\\1/p')\" = \"$rust_version\" ]
                [ \"$(cargo -vV | sed -n 's/host: \\(.*\\)/\\1/p')\" = x86_64-unknown-linux-gnu ]

                mkdir ./.cargo ./src

                cat > ./.cargo/config.toml << EOF
                [build]
                rustflags = [
                    \"--cfg\", \"atcoder\",
                ]
                EOF

                cat > ./Cargo.toml << EOF
                [profile.release]
                lto = true # コンパイル時間が著しく長くなってしまう場合は無し

                [package]
                name = \"main\"
                version = \"0.0.0\"
                edition = \"2021\"
                publish = false

                [dependencies]
                # 202301から:
                ac-library-rs = \"=0.1.1\"
                once_cell = \"=1.18.0\"
                static_assertions = \"=1.1.0\"
                varisat = \"=0.2.2\"
                memoise = \"=0.3.2\"
                argio = \"=0.2.0\"
                bitvec = \"=1.0.1\"
                counter = \"=0.5.7\"
                hashbag = \"=0.1.11\"
                pathfinding = \"=4.3.0\"
                recur-fn = \"=2.2.0\"
                indexing = { version = \"=0.4.1\", features = [\"experimental_pointer_ranges\"] }
                amplify = { version = \"=3.14.2\", features = [\"c_raw\", \"rand\", \"stringly_conversions\"] }
                amplify_derive = \"=2.11.3\"
                amplify_num = { version = \"=0.4.1\", features = [\"std\"] }
                easy-ext = \"=1.0.1\"
                multimap = \"=0.9.0\"
                btreemultimap = \"=0.1.1\"
                bstr = \"=1.6.0\"
                az = \"=1.2.1\"
                glidesort = \"=0.1.2\"
                tap = \"=1.0.1\"
                omniswap = \"=0.1.0\"
                multiversion = \"=0.7.2\"
                # 202004から続投:
                num = \"=0.4.1\"
                num-bigint = \"=0.4.3\"
                num-complex = \"=0.4.3\"
                num-integer = \"=0.1.45\"
                num-iter = \"=0.1.43\"
                num-rational = \"=0.4.1\"
                num-traits = \"=0.2.15\"
                num-derive = \"=0.4.0\"
                ndarray = \"=0.15.6\"
                nalgebra = \"=0.32.3\"
                alga = \"=0.9.3\"
                libm = \"=0.2.7\"
                rand = { version = \"=0.8.5\", features = [\"small_rng\", \"min_const_gen\"] }
                getrandom = \"=0.2.10\"
                rand_chacha = \"=0.3.1\"
                rand_core = \"=0.6.4\"
                rand_hc = \"=0.3.2\"
                rand_pcg = \"=0.3.1\"
                rand_distr = \"=0.4.3\"
                petgraph = \"=0.6.3\"
                indexmap = \"=2.0.0\"
                regex = \"=1.9.1\"
                lazy_static = \"=1.4.0\"
                ordered-float = \"=3.7.0\"
                ascii = \"=1.1.0\"
                permutohedron = \"=0.2.4\"
                superslice = \"=1.0.0\"
                itertools = \"=0.11.0\"
                itertools-num = \"=0.1.3\"
                maplit = \"=1.0.2\"
                either = \"=1.8.1\"
                im-rc = \"=15.1.0\"
                fixedbitset = \"=0.4.2\"
                bitset-fixed = \"=0.1.0\"
                proconio = { version = \"=0.4.5\", features = [\"derive\"] }
                text_io = \"=0.1.12\"
                rustc-hash = \"=1.1.0\"
                smallvec = { version = \"=1.11.0\", features = [\"const_generics\", \"const_new\", \"write\", \"union\", \"serde\", \"arbitrary\"] }
                EOF

                # 1000行以上あるので、GitHubのリポジトリからダウンロード
                curl https://raw.githubusercontent.com/rust-lang-ja/atcoder-proposal/fe6aa6179d074d3a565d3c3db256db54071a38f9/Cargo.lock -fO

                # transitive dependenciesのライセンスについては:
                # - https://github.com/rust-lang-ja/atcoder-proposal/blob/fe6aa6179d074d3a565d3c3db256db54071a38f9/deny.toml
                # - https://github.com/rust-lang-ja/atcoder-proposal/blob/fe6aa6179d074d3a565d3c3db256db54071a38f9/clarify.toml
                # - https://github.com/rust-lang-ja/atcoder-proposal/actions/workflows/licenses.yml

                echo 'fn main() {}' > ./src/main.rs

                cargo build -vv --release
                rm target/release/main
            """
        ),
        dedent(
            """
                cargo build --release --quiet --offline
            """
        ),
        "target/release/main",
        {
            "RUST_BACKTRACE": "0",
        },
        process(
            """
                ./target/release/main
            """,
        ),
    ),
    Language(
        "Python",
        "Python",
        "CPython",
        "3.11.4",
        "Main.py",
        dedent(
            """
                cd /tmp

                # 依存関係のインストール。 参考:https://devguide.python.org/getting-started/setup-building/#build-dependencies
                sudo env DEBIAN_FRONTEND=noninteractive DEBCONF_NONINTERACTIVE_SEEN=true apt install -y build-essential gdb lcov pkg-config \\
                      libbz2-dev libffi-dev libgdbm-dev libgdbm-compat-dev liblzma-dev \\
                      libncurses5-dev libreadline6-dev libsqlite3-dev libssl-dev \\
                      lzma lzma-dev tk-dev uuid-dev zlib1g-dev git

                # Python 3.11.4をソースからインストール
                wget https://www.python.org/ftp/python/3.11.4/Python-3.11.4.tar.xz -O Python-3.11.4.tar.xz
                tar xf Python-3.11.4.tar.xz
                cd Python-3.11.4

                # 追加したいconfigureのオプションがあればご自由にどうぞ
                ./configure --enable-optimizations
                make
                # 元から入っているpythonとバッティングしないように/usr/local/bin/python3.11にインストール
                sudo make altinstall
                cd ..

                python3.11 -m pip install \\
                numpy==1.24.1 \\
                scipy==1.10.1 \\
                networkx==3.0 \\
                sympy==1.11.1 \\
                sortedcontainers==2.4.0  \\
                more-itertools==9.0.0 \\
                shapely==2.0.0 \\
                bitarray==2.6.2 \\
                PuLP==2.7.0 \\
                mpmath==1.2.1 \\
                pandas==1.5.2 \\
                z3-solver==4.12.1.0 \\
                scikit-learn==1.2.0 \\
                ortools==9.5.2237 \\
                torch==1.13.1 \\
                polars==0.15.15 \\
                lightgbm==3.3.1 \\
                gmpy2==2.1.5 \\
                numba==0.57.0 \\
                git+https://github.com/not522/ac-library-python

                # setuptoolsを更新しないとcppyyのインストールでエラーが出る場合がある
                python3.11 -m pip install -U setuptools==66.0.0
                python3.11 -m pip install cppyy==2.4.1

            """
        ),
        dedent(
            """
                python3.11 -m py_compile Main.py
                python3.11 Main.py ONLINE_JUDGE 2> /dev/null
            """
        ),
        "./__pycache__/Main.cpython-311.pyc",
        {},
        process(
            """
                python3.11
                Main.py
            """,
        ),
    ),
    Language(
        "C++ 20",
        "C++",
        "gcc",
        "12.2",
        "Main.cpp",
        dedent(
            """
                sudo apt install -y g++-12

                #GMP
                sudo apt install -y libgmp3-dev

                cd /tmp

                # ac library
                sudo mkdir /opt/ac-library
                wget https://github.com/atcoder/ac-library/releases/download/v1.5.1/ac-library.zip -O ac-library.zip
                sudo unzip /tmp/ac-library.zip -d /opt/ac-library

                # boost
                sudo apt install -y build-essential
                wget https://boostorg.jfrog.io/artifactory/main/release/1.82.0/source/boost_1_82_0.tar.gz -O boost_1_82_0.tar.gz
                tar xf boost_1_82_0.tar.gz
                cd boost_1_82_0
                ./bootstrap.sh --with-toolset=gcc --without-libraries=mpi,graph_parallel
                ./b2 -j3 toolset=gcc variant=release link=static runtime-link=static cxxflags=\"-std=c++20\" stage
                sudo ./b2 -j3 toolset=gcc variant=release link=static runtime-link=static cxxflags=\"-std=c++20\" --prefix=/opt/boost/gcc install


                #Eigen
                sudo apt install -y libeigen3-dev=3.4.0-2ubuntu2

            """
        ),
        dedent(
            """
                g++-12 -std=gnu++20 -O2 -DONLINE_JUDGE -DATCODER \\
                 -Wall -Wextra \\
                 -mtune=native -march=native \\
                 -fconstexpr-depth=2147483647 -fconstexpr-loop-limit=2147483647 -fconstexpr-ops-limit=2147483647 \\
                 -I/opt/ac-library -I/opt/boost/gcc/include -L/opt/boost/gcc/lib \\
                 -o a.out Main.cpp \\
                 -lgmpxx -lgmp \\
                 -I/usr/include/eigen3

            """
        ),
        "a.out",
        {},
        process(
            """
                ./a.out
            """,
        ),
    ),
    Language(
        "Go",
        "Go",
        "go",
        "1.20.6",
        "main.go",
        dedent(
            """
                pushd /tmp                                    
                wget https://go.dev/dl/go1.20.6.linux-amd64.tar.gz
                sudo tar -C /opt -xf go1.20.6.linux-amd64.tar.gz
                popd
                export PATH=$PATH:/opt/go/bin
                # create project and install libraries
                go mod init atcoder.jp/golang
                go get -u github.com/emirpasic/gods/...
                go get -u gonum.org/v1/gonum/...
                go get -u github.com/liyue201/gostl/...
                go get -u golang.org/x/exp/
            """
        ),
        dedent(
            """
                export PATH=$PATH:/opt/go/bin
                go build -o a.out
            """
        ),
        "a.out",
        {},
        process(
            """
                ./a.out
            """,
        ),
    ),
    Language(
        "C# 11.0",
        "C#",
        ".NET",
        "7.0.7",
        "Main.cs",
        dedent(
            """
                # パッケージリポジトリの設定
                wget -q https://packages.microsoft.com/config/ubuntu/22.10/packages-microsoft-prod.deb -O packages-microsoft-prod.deb
                sudo dpkg -i packages-microsoft-prod.deb
                rm packages-microsoft-prod.deb
                sudo sh -c \"cat > /etc/apt/preferences.d/dotnet <<'EOF'
                Package: dotnet*
                Pin: origin packages.microsoft.com
                Pin-Priority: 1001
                EOF\"
                sudo sh -c \"cat > /etc/apt/preferences.d/aspnet <<'EOF'
                Package: aspnet*
                Pin: origin packages.microsoft.com
                Pin-Priority: 1001
                EOF\"

                # SDK のインストール
                sudo apt-get update && sudo apt-get install -y dotnet-sdk-7.0=7.0.304-1

                # カレントディレクトリーにプロジェクトファイルを設置
                cat > Main.csproj << EOS
                <Project Sdk=\"Microsoft.NET.Sdk\">
                  <PropertyGroup>
                    <OutputType>Exe</OutputType>
                    <TargetFramework>net7.0</TargetFramework>
                    <ImplicitUsings>enable</ImplicitUsings>
                    <Nullable>annotations</Nullable>
                    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
                    <DefineConstants>ONLINE_JUDGE;ATCODER</DefineConstants>
                    <RuntimeIdentifier>ubuntu-x64</RuntimeIdentifier>
                    <PublishReadyToRun>true</PublishReadyToRun>
                    <SatelliteResourceLanguages>en-US</SatelliteResourceLanguages>
                    <InvariantGlobalization>true</InvariantGlobalization>
                  </PropertyGroup>
                  <ItemGroup>
                    <PackageReference Include=\"ac-library-csharp\" Version=\"3.0.0-atcoder8\" />
                    <PackageReference Include=\"MathNet.Numerics\" Version=\"5.0.0\" />
                    <PackageReference Include=\"Microsoft.ML\" Version=\"2.0.1\" />
                    <PackageReference Include=\"Microsoft.ML.LightGbm\" Version=\"2.0.1\" />
                  </ItemGroup>
                </Project>
                EOS

                # プロジェクトをリストア。あらかじめコンパイルを通してWJの短縮を試みる
                echo 'Console.WriteLine(\"Hello, world!\");' > Main.cs
                export DOTNET_EnableWriteXorExecute=0
                dotnet publish -c Release -o tmp -v q --nologo 1>&2
                rm Main.cs
            """
        ),
        dedent(
            """
                export DOTNET_EnableWriteXorExecute=0
                dotnet publish -c Release -o publish -v q --nologo 1>&2
            """
        ),
        "publish/Main",
        {
            "DOTNET_EnableWriteXorExecute": "0",
        },
        process(
            """
                ./publish/Main
            """,
        ),
    ),
    Language(
        "Kotlin",
        "Kotlin",
        "Kotlin/JVM",
        "1.8.20",
        "Main.kt",
        dedent(
            """
                sudo apt update
                sudo apt install -y curl zip unzip

                curl -s https://get.sdkman.io | bash
                source $HOME/.sdkman/bin/sdkman-init.sh
                # check that sdkman is installed.
                sdk version

                sudo apt install -y openjdk-19-jdk
                # check java that java is installed.
                java -version

                sdk install kotlin 1.8.20
                kotlin -version
            """
        ),
        dedent(
            """
                $HOME/.sdkman/candidates/kotlin/current/bin/kotlinc ./Main.kt -include-runtime -jvm-target 19 -d ./Main.jar
            """
        ),
        "Main.jar",
        {},
        process(
            """
                /usr/lib/jvm/java-19-openjdk-amd64/bin/java
                -cp
                ./Main.jar
                -Xss{memory:mb}M
                -DONLINE_JUDGE=true
                MainKt
            """,
        ),
    ),
    Language(
        "Java",
        "Java",
        "OpenJDK",
        "17",
        "Main.java",
        dedent(
            """
                sudo apt install openjdk-17-jdk
            """
        ),
        dedent(
            """
                javac Main.java
            """
        ),
        "Main.class",
        {},
        process(
            """
                java
                -Xss{memory:mb}M
                -DONLINE_JUDGE=true
                Main
            """,
        ),
    ),
    Language(
        "Nim",
        "Nim",
        "Nim",
        "1.6.14",
        "Main.nim",
        dedent(
            """
                sudo apt update && sudo apt install -y curl xz-utils g++ git
                curl https://nim-lang.org/choosenim/init.sh -sSf | bash -s -- -y
                export PATH=$HOME/.nimble/bin:$PATH
                nimble install neo -y
                sudo apt install libopenblas-base -y
                nimble install https://github.com/zer0-star/Nim-ACL
                nimble install bignum -y
            """
        ),
        dedent(
            """
                export PATH=$HOME/.nimble/bin:$PATH
                nim cpp -d:release --opt:speed --multimethods:on --warning[SmallLshouldNotBeUsed]:off --hints:off -o:a.out Main.nim
            """
        ),
        "a.out",
        {},
        process(
            """
                ./a.out
            """,
        ),
    ),
    Language(
        "V",
        "V",
        "V",
        "0.4",
        "Main.v",
        dedent(
            """
                sudo apt install -y git clang-15
                sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-15 10
                wget https://github.com/vlang/v/releases/download/0.4/v_linux.zip
                unzip v_linux.zip
                pushd v
                sudo ./v symlink
                v install vsl
                v install vtl
                v install lemoncmd.proconio
                popd
            """
        ),
        dedent(
            """
                v -prod -cc clang -skip-unused -manualfree -prealloc -gc none -no-bounds-checking -o a.out Main.v
            """
        ),
        "a.out",
        {},
        process(
            """
                ./a.out
            """,
        ),
    ),
    Language(
        "Zig",
        "Zig",
        "Zig",
        "0.10.1",
        "Main.zig",
        dedent(
            """
                sudo apt install git -y
                pushd /tmp
                wget https://ziglang.org/download/0.10.1/zig-linux-x86_64-0.10.1.tar.xz
                sudo tar -C /opt -xf zig-linux-x86_64-0.10.1.tar.xz
                sudo ln -s /opt/zig-linux-x86_64-0.10.1/zig /usr/local/bin/zig
                git clone https://github.com/mattnite/gyro.git
                cd gyro
                zig build -Drelease-safe
                sudo cp zig-out/bin/gyro /usr/local/bin
                popd

                # Create Project
                zig init-exe
                sed -i -e 's/const mode = .*/const mode = std.builtin.Mode.ReleaseFast;/;s/addExecutable(.*/addExecutable(\"a.out\", \"Main.zig\");/;/@import/aconst pkgs = @import(\"deps.zig\").pkgs;' build.zig
                sed -i -e '/addExecutable/a\\ \\ \\ \\ pkgs.addAllTo(exe);' build.zig

                # Install Libraries
                gyro add --src github --root zig-string.zig JakubSzark/zig-string
                gyro add --src github --root ziter.zig Hejsil/ziter
                gyro fetch
            """
        ),
        dedent(
            """
                zig build
            """
        ),
        "zig-out/bin/a.out",
        {},
        process(
            """
                ./zig-out/bin/a.out
            """,
        ),
    ),
    Language(
        "JavaScript",
        "JavaScript",
        "Node.js",
        "18.16.1",
        "Main.js",
        dedent(
            """
                cd /tmp
                NODE_VERSION=18.16.1
                wget https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-x64.tar.xz
                sudo tar -C /opt -xf node-v$NODE_VERSION-linux-x64.tar.xz
                sudo ln -s /opt/node-v$NODE_VERSION-linux-x64/bin/node /usr/local/bin
                sudo ln -s /opt/node-v$NODE_VERSION-linux-x64/bin/npm /usr/local/bin
                sudo ln -s /opt/node-v$NODE_VERSION-linux-x64/bin/npx /usr/local/bin
                sudo npm install -g mathjs@11.8.2
                ln -s /opt/node-v$NODE_VERSION-linux-x64/lib/node_modules ~/.node_modules
            """
        ),
        dedent(
            """
                node --check Main.js && touch ok
            """
        ),
        "ok",
        {},
        process(
            """
                node
                --stack-size={memory:kb}
                Main.js
                ONLINE_JUDGE
                ATCODER
            """,
        ),
    ),
    Language(
        "JavaScript",
        "JavaScript",
        "Deno",
        "1.35.1",
        "Main.js",
        dedent(
            """
                sudo apt-get install unzip
                curl -fsSL https://deno.land/install.sh | sh -s v1.35.1
                export NO_COLOR=true
                export DENO_NO_UPDATE_CHECK=1
                export PATH=$PATH:/home/runner/.deno/bin

                deno cache npm:mathjs@11.8.2
                # deno_stdをキャッシュに入れておく。
                cd /tmp
                wget https://github.com/denoland/deno_std/archive/refs/tags/0.194.0.tar.gz
                tar xf 0.194.0.tar.gz
                find deno_std-0.194.0 -name \"*.ts\" >> stdfiles
                find deno_std-0.194.0 -name \"*.js\" >> stdfiles
                sed -i -e \"s%deno_std-\\(.*\\)%import 'https://deno.land/std@\\1';%\" stdfiles
                deno cache stdfiles
            """
        ),
        dedent(
            """
                export NO_COLOR=true
                export PATH=$PATH:/home/runner/.deno/bin
                export DENO_NO_UPDATE_CHECK=1

                # キャッシュしつつ、import・構文などをチェック
                if deno cache --quiet Main.js > check-output 2>&1 ; then
                    touch ok
                else
                  cat check-output 1>&2
                  if grep -q \"error sending request for url (http\" check-output 2>/dev/null; then
                    # ライブラリをダウンロードしようとした場合はヒントを表示
                    echo \"---\" 1>&2
                    echo \"Tips from the judge system: The only available external libraries are:\" 1>&2
                    echo \"- std@0.194.0\" 1>&2
                    echo \"- npm:mathjs@11.8.2\" 1>&2
                    echo \"Please make sure to specify the version number when importing.\" 1>&2
                  fi
                fi
            """
        ),
        "ok",
        {
            "PATH": "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/home/runner/.deno/bin",
            "NO_COLOR": "true",
            "DENO_NO_UPDATE_CHECK": "1",
        },
        process(
            """
                deno
                run
                --allow-all
                --quiet
                --no-prompt
                --v8-flags=--stack-size={memory:kb}
                Main.js
                ONLINE_JUDGE
                ATCODER
            """,
        ),
    ),
    Language(
        "R",
        "R",
        "GNU R",
        "4.2.1",
        "Main.R",
        dedent(
            """
                sudo apt install r-base r-base-dev
                sudo Rscript -e \"install.packages(c('Rcpp', 'stringr', 'purrr', 'magrittr', 'sets', 'dequer', 'zeallot', 'lubridate', 'readr'))\"
            """
        ),
        dedent(
            """
                Rscript Main.R < /dev/null &> /dev/null
                Rscript -e \"parse('Main.R')\" && touch a.out
            """
        ),
        "a.out",
        {},
        process(
            """
                Rscript
                Main.R
            """,
        ),
    ),
    Language(
        "D",
        "D",
        "DMD",
        "2.104.0",
        "source/app.d",
        dedent(
            """
                sudo apt update
                sudo apt install -y --no-install-recommends curl build-essential ca-certificates libxml2

                D_COMPLILER=\"dmd-2.104.0\"
                export DFLAGS=\"-O -release -boundscheck=off\"
                wget https://dlang.org/install.sh -O /tmp/install.sh
                chmod +x /tmp/install.sh
                /tmp/install.sh install ${D_COMPLILER} 

                sudo ln -s $(/tmp/install.sh get-path ${D_COMPLILER}) /usr/local/bin/dmd
                sudo ln -s $(/tmp/install.sh get-path --dub ${D_COMPLILER}) /usr/local/bin/dub

                dub init -n
                dub add mir
                dub build
                rm judge source/app.d
            """
        ),
        dedent(
            """
                export DFLAGS=\"-O -release -boundscheck=off\"
                dub build --skip-registry=all --nodeps
            """
        ),
        "judge",
        {},
        process(
            """
                ./judge
            """,
        ),
    ),
    Language(
        "Python",
        "Python",
        "PyPy",
        "3.10-v7.3.12",
        "Main.py",
        dedent(
            """
                # get-pip.pyなどの一時的にしか必要ないファイルは/tmpに置くことが推奨されているので、ここで作業
                cd /tmp

                sudo apt update
                # git : ac-library-pythonのインストールなどに使う
                # wget, bzip2 : バイナリのDLと展開に必要
                sudo apt install -y git wget bzip2

                # pypy3.10-v7.3.12-linux64.tar.bz2をダウンロードして手動でインストール
                wget https://downloads.python.org/pypy/pypy3.10-v7.3.12-linux64.tar.bz2
                sudo tar -xvf pypy3.10-v7.3.12-linux64.tar.bz2 -C /usr/local
                sudo ln -s /usr/local/pypy3.10-v7.3.12-linux64/bin/pypy3 /usr/local/bin/pypy3

                # pipを使えるようにする
                wget https://bootstrap.pypa.io/get-pip.py
                pypy3 get-pip.py --break-system-packages
                # numpyなど各種ライブラリを入れるのに必要
                sudo apt install -y gcc g++ gfortran libopenblas-dev liblapack-dev pkg-config libgeos-dev

                pypy3 -mpip install --break-system-packages \\
                    numpy==1.24.1 \\
                    scipy==1.10.1 \\
                    networkx==3.0 \\
                    sympy==1.11.1 \\
                    sortedcontainers==2.4.0  \\
                    more-itertools==9.0.0 \\
                    shapely==2.0.0 \\
                    bitarray==2.6.2 \\
                    PuLP==2.7.0 \\
                    mpmath==1.2.1 \\
                    pandas==1.5.2 \\
                    z3-solver==4.12.1.0 \\
                    scikit-learn==1.3.0 \\
                    typing-extensions==4.4.0 \\
                    cppyy==2.4.1 \\
                    git+https://github.com/not522/ac-library-python

            """
        ),
        dedent(
            """
                pypy3 -m py_compile Main.py
                pypy3 Main.py ONLINE_JUDGE 2> /dev/null
            """
        ),
        "./__pycache__/Main.pypy310.pyc",
        {},
        process(
            """
                pypy3
                Main.py
            """,
        ),
    ),
    Language(
        "Swift",
        "Swift",
        "swift",
        "5.8.1",
        "Sources/main.swift",
        dedent(
            """
                # 公式手順を参考にしています。
                # 量が多いので, 可能であれば./setup.shなどで実行することをお勧めします。
                # 手元のDocker(M1 Mac上, Ubuntu(Intel CPU)上)のubuntu:22.10環境で確認済み。

                # References
                # https://www.swift.org/getting-started/ 
                # https://www.swift.org/download/
                # https://github.com/apple/swift-docker/blob/59e3cc2532e57bb75b406bb9c589b62bd12edd5c/5.7/ubuntu/22.04/Dockerfile

                sudo apt update
                export DEBIAN_FRONTEND=noninteractive

                # don't use apt!
                sudo apt-get install -y \\
                    binutils \\
                    git \\
                    gnupg2 \\
                    libc6-dev \\
                    libcurl4-openssl-dev \\
                    libedit2 \\
                    libgcc-9-dev \\
                    libpython3.8 \\
                    libsqlite3-0 \\
                    libstdc++-9-dev \\
                    libxml2-dev \\
                    libz3-dev \\
                    pkg-config \\
                    tzdata \\
                    unzip \\
                    zlib1g-dev
                # 依存packagesの公式インストール方法だが、libpython3.8がデフォルトでubuntu22ではapt repositoryに存在しない。
                # aptだと一つでも存在しなかったらエラーで強制終了するため、apt-getにしている。libpython3.8の行を消してもいいかも。
                # libpython3.8はなくても問題ないことを確認済み。

                export SWIFT_PLATFORM=ubuntu22.04
                export SWIFT_VERSION_NUMBER=5.8.1
                export SWIFT_BRANCH=swift-$SWIFT_VERSION_NUMBER-release
                export SWIFT_VERSION=swift-$SWIFT_VERSION_NUMBER-RELEASE
                export SWIFT_WEBROOT=https://download.swift.org

                # check architecture
                # CPUなど低レイヤーの環境が不明のため。
                set -e
                ARCH_NAME=\"$(dpkg --print-architecture)\"
                url=
                case \"${ARCH_NAME##*-}\" in
                'amd64')
                    OS_ARCH_SUFFIX=''
                    ;;
                'arm64')
                    OS_ARCH_SUFFIX='-aarch64'
                    ;;
                *)
                    echo >&2 \"error: unsupported architecture: '$ARCH_NAME'\"
                    exit 1
                    ;;
                esac

                export SWIFT_WEBDIR=\"$SWIFT_WEBROOT/$SWIFT_BRANCH/$(echo $SWIFT_PLATFORM | tr -d .)$OS_ARCH_SUFFIX\"
                export FILE_NAME=\"$SWIFT_VERSION-$SWIFT_PLATFORM$OS_ARCH_SUFFIX\"
                export SWIFT_BIN_URL=\"$SWIFT_WEBDIR/$SWIFT_VERSION/$FILE_NAME.tar.gz\"

                sudo apt install -y wget

                wget -O - \"$SWIFT_BIN_URL\" | sudo tar -xzC /usr/local/ \\
                    --transform=s/$FILE_NAME/swift/

                # echo 'export PATH=/usr/local/swift/usr/bin:$PATH' >>~/.bashrc

                # verify swift command.
                # source ~/.bashrc
                export PATH=/usr/local/swift/usr/bin:$PATH
                swift --version
                # 正しく表示されればswiftcも使えます。

                # create project
                # mkdir swift
                # cd swift
                swift package init --name Main --type executable
                cat << 'EOF' > Package.swift
                // swift-tools-version: 5.8.1
                import PackageDescription

                let package = Package(
                  name: \"Main\",
                  dependencies: [
                    .package(
                      url: \"https://github.com/apple/swift-collections.git\",
                      .upToNextMajor(from: \"1.0.0\") // or `.upToNextMinor
                    ),
                    .package(url: \"https://github.com/apple/swift-algorithms.git\", .upToNextMajor(from: \"1.0.0\"))
                  ],
                  targets: [
                    .executableTarget(
                      name: \"Main\",
                      dependencies: [
                        .product(name: \"Collections\", package: \"swift-collections\"),
                        .product(name: \"Algorithms\", package: \"swift-algorithms\")
                      ],
                      path: \"Sources\"
                    )
                  ]
                )
                EOF
                # install library
                swift build -Xswiftc -O -Xlinker -lm -c release
                rm .build/release/Main
            """
        ),
        dedent(
            """
                export PATH=/usr/local/swift/usr/bin:$PATH
                swift build -Xswiftc -O -Xlinker -lm -c release 1>&2
            """
        ),
        ".build/release/Main",
        {},
        process(
            """
                ./.build/release/Main
            """,
        ),
    ),
    Language(
        "Dart",
        "Dart",
        "Dart",
        "3.0.5",
        "Main.dart",
        dedent(
            """
                cd /tmp
                wget https://storage.googleapis.com/dart-archive/channels/stable/release/3.0.5/linux_packages/dart_3.0.5-1_amd64.deb          
                sudo dpkg -i dart_3.0.5-1_amd64.deb
                dart --disable-analytics
            """
        ),
        dedent(
            """
                dart compile exe Main.dart -o a.out
            """
        ),
        "a.out",
        {},
        process(
            """
                ./a.out
            """,
        ),
    ),
    Language(
        "PHP",
        "PHP",
        "php",
        "8.2.8",
        "Main.php",
        dedent(
            """
                sudo apt update
                # add-apt-repositoryが無ければ
                sudo apt -y install software-properties-common
                sudo add-apt-repository -y ppa:ondrej/php
                sudo sed -i -e 's/kinetic/jammy/' /etc/apt/sources.list.d/ondrej-ubuntu-php-kinetic.list
                sudo apt update
                DEBIAN_FRONTEND=noninteractive sudo -E apt install -y php8.2-cli php8.2-gmp php8.2-bcmath php8.2-sqlite3
                echo \"opcache.enable_cli = 1
                opcache.jit = 1205
                opcache.jit_buffer_size = 128M
                \" | sudo tee -a /etc/php/8.2/cli/conf.d/10-opcache.ini

            """
        ),
        dedent(
            """
                # チェックで問題が無かった場合OKファイルを生成
                php -l Main.php && touch OK
            """
        ),
        "OK",
        {},
        process(
            """
                php
                Main.php
            """,
        ),
    ),
    Language(
        "C",
        "C",
        "gcc",
        "12.2.0",
        "Main.c",
        dedent(
            """
                sudo apt install gcc-12
            """
        ),
        dedent(
            """
                gcc-12 -std=gnu2x -O2 -DONLINE_JUDGE -DATCODER -o a.out Main.c -lm
            """
        ),
        "a.out",
        {},
        process(
            """
                ./a.out
            """,
        ),
    ),
    Language(
        "Ruby",
        "Ruby",
        "ruby",
        "3.2.2",
        "Main.rb",
        dedent(
            """
                sudo apt-get install autoconf bison patch build-essential rustc libssl-dev libyaml-dev libreadline6-dev zlib1g-dev libgmp-dev libncurses5-dev libffi-dev libgdbm6 libgdbm-dev libdb-dev uuid-dev
                cd /tmp
                wget https://cache.ruby-lang.org/pub/ruby/3.2/ruby-3.2.2.tar.gz
                tar -xf ruby-3.2.2.tar.gz
                cd ruby-3.2.2
                export cflags=-fno-stack-clash-protection
                ./configure
                make
                sudo make install
                # 以下、Library のインストール
                sudo gem install rbtree
                sudo gem install ac-library-rb
                sudo gem install faster_prime
                sudo gem install sorted_set
                sudo gem install numo-narray
                sudo gem install polars-df
            """
        ),
        dedent(
            """
                ruby -c Main.rb && touch syntax_ok
            """
        ),
        "syntax_ok",
        {
            "RUBY_THREAD_VM_STACK_SIZE": "{memory:b}",
        },
        process(
            """
                ruby
                --jit
                --yjit-exec-mem-size=128
                Main.rb
            """,
        ),
    ),
    Language(
        "Crystal",
        "Crystal",
        "Crystal",
        "1.9.1",
        "main/src/main.cr",
        dedent(
            """
                sudo apt update
                sudo apt install -y libgmp-dev libpcre2-dev git curl
                curl -fsSL https://crystal-lang.org/install.sh | sudo bash -s -- --version=1.9
                # 以下、project 作成
                mkdir main
                cd main
                crystal init app .
                cat >> shard.yml <<EOF
                dependencies:
                  atcoder:
                    github: google/ac-library.cr
                EOF
                # install libraries in the project
                shards install --verbose
            """
        ),
        dedent(
            """
                cd main && shards build --release --no-debug --no-color -Donline_judge 1>&2
            """
        ),
        "main/bin/main",
        {},
        process(
            """
                ./main/bin/main
            """,
        ),
    ),
    Language(
        "Brainfuck",
        "Brainfuck",
        "bf",
        "20041219",
        "Main.bf",
        dedent(
            """
                sudo apt install bf

            """
        ),
        dedent(
            """

            """
        ),
        "",
        {},
        process(
            """
                bf
                -c999999999
                Main.bf
            """,
        ),
    ),
    Language(
        "Whitespace",
        "Whitespace",
        "whitespacers",
        "1.0.0",
        "Main.ws",
        dedent(
            """
                sudo apt update
                sudo apt install -y rustc cargo git
                cd /tmp
                git clone https://github.com/CensoredUsername/whitespace-rs
                cd whitespace-rs
                cargo build --release
                sudo cp target/release/wsc /usr/local/bin
            """
        ),
        dedent(
            """
                wsc --dump Main.dump Main.ws
            """
        ),
        "Main.dump",
        {},
        process(
            """
                wsc
                Main.ws
            """,
        ),
    ),
    Language(
        "Scala",
        "Scala",
        "Dotty",
        "3.3.0",
        "Main.scala",
        dedent(
            """
                sudo apt update
                sudo apt install -y gnupg
                curl -s --compressed \"https://virtuslab.github.io/scala-cli-packages/KEY.gpg\" | sudo apt-key add -
                sudo curl -s --compressed -o /etc/apt/sources.list.d/scala_cli_packages.list \"https://virtuslab.github.io/scala-cli-packages/debian/scala_cli_packages.list\"
                sudo apt update
                sudo apt install -y openjdk-20-jdk-headless scala-cli ansifilter
                cat << 'EOF' > Main.scala
                object Main {
                  def main(args: Array[String]): Unit =
                    println(\"Hello, world!\")
                }
                EOF
                scala-cli --power package --bloop-jvm system --jvm system -S 3.3.0 Main.scala -o Main --assembly
                rm Main
            """
        ),
        dedent(
            """
                scala-cli --power package --bloop-jvm system --jvm system -S 3.3.0 Main.scala -o Main --assembly 2>&1 | ansifilter 1>&2
            """
        ),
        "./Main",
        {},
        process(
            """
                ./Main
            """,
        ),
    ),
    Language(
        "F# 7.0",
        "F#",
        ".NET",
        "7.0.7",
        "Main.fs",
        dedent(
            """
                # パッケージリポジトリの設定
                wget -q https://packages.microsoft.com/config/ubuntu/22.10/packages-microsoft-prod.deb -O packages-microsoft-prod.deb
                sudo dpkg -i packages-microsoft-prod.deb
                rm packages-microsoft-prod.deb
                sudo sh -c \"cat > /etc/apt/preferences.d/dotnet <<'EOF'
                Package: dotnet*
                Pin: origin packages.microsoft.com
                Pin-Priority: 1001
                EOF\"
                sudo sh -c \"cat > /etc/apt/preferences.d/aspnet <<'EOF'
                Package: aspnet*
                Pin: origin packages.microsoft.com
                Pin-Priority: 1001
                EOF\"

                # SDK のインストール
                sudo apt-get update && sudo apt-get install -y dotnet-sdk-7.0=7.0.304-1

                # カレントディレクトリーにプロジェクトファイルを設置
                cat > Main.fsproj << EOS
                <Project Sdk=\"Microsoft.NET.Sdk\">
                  <PropertyGroup>
                    <OutputType>Exe</OutputType>
                    <TargetFramework>net7.0</TargetFramework>
                    <DefineConstants>ONLINE_JUDGE;ATCODER</DefineConstants>
                    <RuntimeIdentifier>ubuntu-x64</RuntimeIdentifier>
                    <PublishReadyToRun>true</PublishReadyToRun>
                    <SatelliteResourceLanguages>en-US</SatelliteResourceLanguages>
                    <InvariantGlobalization>true</InvariantGlobalization>
                  </PropertyGroup>
                  <ItemGroup>
                    <Compile Include=\"Main.fs\" />
                  </ItemGroup>
                  <ItemGroup>
                    <PackageReference Include=\"ac-library-csharp\" Version=\"3.0.0-atcoder8\" />
                    <PackageReference Include=\"MathNet.Numerics\" Version=\"5.0.0\" />
                    <PackageReference Include=\"MathNet.Numerics.FSharp\" Version=\"5.0.0\" />
                    <PackageReference Include=\"Microsoft.ML\" Version=\"2.0.1\" />
                    <PackageReference Include=\"Microsoft.ML.LightGbm\" Version=\"2.0.1\" />
                  </ItemGroup>
                </Project>
                EOS

                # プロジェクトをリストア。あらかじめコンパイルを通してWJの短縮を試みる
                echo 'stdout.WriteLine \"Hello, world!\"' > Main.fs
                export DOTNET_EnableWriteXorExecute=0
                dotnet publish -c Release -o tmp -v q --nologo 1>&2
                rm Main.fs
            """
        ),
        dedent(
            """
                export DOTNET_EnableWriteXorExecute=0
                dotnet publish -c Release -o publish -v q --nologo 1>&2
            """
        ),
        "publish/Main",
        {
            "DOTNET_EnableWriteXorExecute": "0",
        },
        process(
            """
                ./publish/Main
            """,
        ),
    ),
    Language(
        "><>",
        "><>",
        "fishr",
        "0.1.0",
        "Main.fish",
        dedent(
            """
                sudo apt update                                         
                sudo apt install -y rustc cargo git                     
                cd /tmp                                                 
                git clone https://github.com/noirotm/fishr              
                cd fishr                                                
                cargo build --release                                   
                sudo cp target/release/fishr /usr/local/bin
            """
        ),
        dedent(
            """

            """
        ),
        "",
        {},
        process(
            """
                fishr
                Main.fish
            """,
        ),
    ),
    Language(
        "Koka",
        "Koka",
        "koka",
        "2.4.0",
        "Main.kk",
        dedent(
            """
                cd /tmp
                wget https://github.com/koka-lang/koka/releases/download/v2.4.0/koka-v2.4.0-ubuntu-x64.deb
                sudo dpkg -i koka-v2.4.0-ubuntu-x64.deb
            """
        ),
        dedent(
            """
                koka -O2 -o a.out Main.kk 1>&2
                if [ -f a.out ]; then chmod +x a.out; fi
            """
        ),
        "a.out",
        {},
        process(
            """
                ./a.out
            """,
        ),
    ),
    Language(
        "Julia",
        "Julia",
        "Julia",
        "1.9.2",
        "Main.jl",
        dedent(
            """
                sudo apt install -y curl
                # See: https://github.com/JuliaLang/juliaup
                curl -fsSL https://install.julialang.org | sh -s -- --yes --default-channel 1.9.2
                # Install Packages
                export PATH=$PATH:/home/runner/.juliaup/bin
                julia -e \"using Pkg; Pkg.update(); Pkg.add(ARGS)\" DataStructures DelimitedFiles Distributions Primes OffsetArrays Combinatorics StaticArrays IterTools InvertedIndices
                julia -e \"using DataStructures, DelimitedFiles, Distributions, Primes, OffsetArrays, Combinatorics, StaticArrays, IterTools, InvertedIndices\"
                juliaup config backgroundselfupdateinterval 0
                juliaup config startupselfupdateinterval 0
                juliaup config versionsdbupdateinterval 0

            """
        ),
        dedent(
            """
                export PATH=$PATH:/home/runner/.juliaup/bin
                julia -e \"Meta.parse(\\\"begin \\\" * read(\\\"Main.jl\\\",String) * \\\" end\\\")\" && touch ok
                julia Main.jl ONLINE_JUDGE 2> /dev/null
            """
        ),
        "ok",
        {
            "PATH": "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/home/runner/.juliaup/bin:$PATH",
        },
        process(
            """
                julia
                Main.jl
            """,
        ),
    ),
    Language(
        "TypeScript 5.1",
        "TypeScript",
        "Node.js",
        "18.16.1",
        "Main.ts",
        dedent(
            """
                sudo apt update
                sudo apt install -y ansifilter
                cd /tmp
                NODE_VERSION=18.16.1
                wget https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-x64.tar.xz
                sudo tar -C /opt -xf node-v$NODE_VERSION-linux-x64.tar.xz
                sudo ln -s /opt/node-v$NODE_VERSION-linux-x64/bin/node /usr/local/bin
                sudo ln -s /opt/node-v$NODE_VERSION-linux-x64/bin/npm /usr/local/bin
                sudo ln -s /opt/node-v$NODE_VERSION-linux-x64/bin/npx /usr/local/bin
                sudo npm install -g typescript@5.1.6
                sudo npm install -g tstl@2.5.13
                sudo npm install -g mathjs@11.8.2
                sudo npm install -g @types/node@18.16.18
                sudo ln -s /opt/node-v$NODE_VERSION-linux-x64/bin/tsc /usr/local/bin
                sudo ln -s /opt/node-v$NODE_VERSION-linux-x64/lib/node_modules /node_modules
            """
        ),
        dedent(
            """
                tsc Main.ts --target ESNext --moduleResolution node --module commonjs --noEmitOnError --pretty true | ansifilter 1>&2
            """
        ),
        "Main.js",
        {},
        process(
            """
                node
                --stack-size={memory:kb}
                Main.js
                ONLINE_JUDGE
                ATCODER
            """,
        ),
    ),
    Language(
        "Bash",
        "Bash",
        "bash",
        "5.2.2",
        "Main.bash",
        dedent(
            """
                sudo apt -y install bash
            """
        ),
        dedent(
            """
                bash -n Main.bash || rm Main.bash
            """
        ),
        "Main.bash",
        {},
        process(
            """
                bash
                Main.bash
            """,
        ),
    ),
    Language(
        "Text",
        "Text",
        "cat",
        "8.32",
        "Main.text",
        dedent(
            """
                #デフォルトであるのでインストールは不要
            """
        ),
        dedent(
            """

            """
        ),
        "",
        {},
        process(
            """
                cat
                Main.text
            """,
        ),
    ),
    Language(
        "Haskell",
        "Haskell",
        "GHC",
        "9.4.5",
        "submission/app/Main.hs",
        dedent(
            """
                # ユーザー名が runner 固定に見えたので，このインストールはuser-localです(apt-get を除き，multi-user環境を変えない)．
                # 必ずユーザー runner にログインして実行してください！
                # multi-user install が必要な場合はお知らせください．

                # Install prerequisites
                sudo apt-get update
                sudo apt-get upgrade -y
                sudo apt-get install -y curl
                sudo apt-get install -y --no-install-recommends build-essential curl libffi-dev libffi8ubuntu1 libgmp-dev libgmp10 libncurses-dev libncurses5 libtinfo5 llvm-14


                # Install Haskell
                curl --proto '=https' --tlsv1.2 -sSf https://get-ghcup.haskell.org | BOOTSTRAP_HASKELL_NONINTERACTIVE=1 BOOTSTRAP_HASKELL_GHC_VERSION=9.4.5 BOOTSTRAP_HASKELL_CABAL_VERSION=3.8.1.0 BOOTSTRAP_HASKELL_INSTALL_NO_STACK=1 sh

                # Set PATH
                source ~/.ghcup/env

                # Set dependencies and build options
                mkdir -p submission/app

                cd submission

                cat > submission.cabal <<'PKG_CABAL_EOF'
                cabal-version:      3.4
                name:               submission
                version:            0.1.0.0
                synopsis:           A Haskell program submitted to AtCoder
                -- description:
                license:            NONE
                author:             submitter-anonymous
                maintainer:         NONE
                -- copyright:
                category:           Competitive
                build-type:         Simple
                -- extra-doc-files:    CHANGELOG.md
                -- extra-source-files:

                common warnings
                    ghc-options: -Wall

                flag atcoder
                    description:    Indicates this is on the AtCoder judge server
                    default:        False
                    manual:         True

                executable main
                    import:           warnings
                    main-is:          Main.hs
                    -- other-modules:
                    -- other-extensions:
                    build-depends:
                                  Cabal ^>=3.10.1.0,
                                  Cabal-syntax ^>=3.10.1.0,
                                  QuickCheck ^>=2.14.3,
                                  adjunctions ^>=4.4.2,
                                  array ==0.5.4.0,
                                  attoparsec ^>=0.14.4,
                                  base ==4.17.1.0,
                                  bifunctors ^>=5.6.1,
                                  binary ^>=0.8.9.1,
                                  bitvec ^>=1.1.4.0,
                                  bytestring ^>=0.11.4.0,
                                  comonad ^>=5.0.8,
                                  containers ^>=0.6.7,
                                  contravariant ^>=1.5.5,
                                  deepseq ==1.4.8.0,
                                  directory >=1.3.7.1 && <1.3.8.0,
                                  distributive ^>=0.6.2.1,
                                  exceptions ^>=0.10.7,
                                  extra ^>=1.7.13,
                                  fgl ^>=5.8.1.1,
                                  filepath >=1.4.2.2 && <1.4.99,
                                  free ^>=5.2,
                                  ghc-bignum ==1.3,
                                  ghc-boot-th ==9.4.5,
                                  ghc-prim ==0.9.0,
                                  hashable ^>=1.4.2.0,
                                  heaps ^>=0.4,
                                  indexed-traversable ^>=0.1.2.1,
                                  indexed-traversable-instances ^>=0.1.1.2,
                                  integer-gmp ^>=1.1,
                                  integer-logarithms ^>=1.0.3.1,
                                  kan-extensions ^>=5.2.5,
                                  lens ^>=5.2.2,
                                  linear-base ^>=0.3.1,
                                  list-t ^>=1.0.5.6,
                                  massiv ^>=1.0.4.0,
                                  megaparsec ^>=9.4.1,
                                  mono-traversable ^>=1.0.15.3,
                                  mtl ^>=2.3.1,
                                  mutable-containers ^>=0.3.4.1,
                                  mwc-random ^>=0.15.0.2,
                                  parallel ^>=3.2.2.0,
                                  parsec ^>=3.1.16.1,
                                  parser-combinators ^>=1.3.0,
                                  pretty ^>=1.1.3.6,
                                  primitive ^>=0.8.0.0,
                                  process ^>=1.6.17.0,
                                  profunctors ^>=5.6.2,
                                  psqueues ^>=0.2.7.3,
                                  random ^>=1.2.1.1,
                                  reflection ^>=2.1.7,
                                  regex-tdfa ^>=1.3.2.1,
                                  safe-exceptions ^>=0.1.7.3,
                                  scientific ^>=0.3.7.0,
                                  semialign ^>=1.3,
                                  semigroupoids ^>=6.0.0.1,
                                  split ^>=0.2.3.5,
                                  stm ^>=2.5.1.0,
                                  strict ^>=0.5,
                                  strict-lens ^>=0.4.0.3,
                                  tagged ^>=0.8.7,
                                  template-haskell ==2.19.0.0,
                                  text ^>=2.0.2,
                                  tf-random ^>=0.5,
                                  these ^>=1.2,
                                  these-lens ^>=1.0.1.3,
                                  time ^>=1.12.2,
                                  transformers ^>=0.6.1.0,
                                  trifecta ^>=2.1.2,
                                  unboxing-vector ^>=0.2.0.0,
                                  unix ==2.7.3,
                                  unordered-containers ^>=0.2.19.1,
                                  utility-ht ^>=0.0.17,
                                  vector ^>=0.13.0.0,
                                  vector-algorithms ^>=0.9.0.1,
                                  vector-stream ^>=0.1.0.0,
                                  vector-th-unbox ^>=0.2.2,
                                  xhtml ^>=3000.2.2.1

                    hs-source-dirs:   app
                    default-language: GHC2021
                    if flag(atcoder)
                      cpp-options: -DATCODER

                PKG_CABAL_EOF

                cat > cabal.project <<'CABAL_PROJECT_EOF'
                packages: ./submission.cabal

                constraints: bitvec +libgmp,
                             clock +llvm,
                             vector-algorithms +llvm
                optimization: 2

                package *
                    compiler: ghc
                    ghc-options: -fllvm -Wall

                CABAL_PROJECT_EOF

                echo \"main = return () :: IO ()\" > app/Main.hs


                # Configure and build dependencies
                cabal v2-update
                cabal v2-configure --flags=\"+atcoder\"
                cabal v2-freeze
                cabal v2-build --only-dependencies


                # Clean up the things only needed for installation
                rm app/Main.hs
                rm -rf ~/.ghcup/bin/ghcup ~/.ghcup/cache ~/.ghcup/logs ~/.ghcup/tmp ~/.ghcup/trash ~/.cabal/logs



            """
        ),
        dedent(
            """
                cd submission
                source ~/.ghcup/env
                cabal v2-build --offline && cp $(cabal list-bin main) ../
            """
        ),
        "main",
        {},
        process(
            """
                ./main
            """,
        ),
    ),
    Language(
        "OCaml",
        "OCaml",
        "ocamlopt",
        "5.0.0",
        "main.ml",
        dedent(
            """
                sudo apt install -y opam
                opam init -y
                opam switch create 5.0.0
                eval $(opam env --switch=5.0.0)
                opam install num containers core iter batteries -y
            """
        ),
        dedent(
            """
                eval $(opam env) ocamlfind ocamlopt -O2 -o a.out \\
                main.ml -linkpkg -thread \\
                -package str,num,threads,containers,core,iter,batteries
            """
        ),
        "a.out",
        {},
        process(
            """
                ./a.out
            """,
        ),
    ),
    Language(
        "Fortran",
        "Fortran",
        "gfortran",
        "12.2",
        "main.f90",
        dedent(
            """
                sudo apt -y install cmake make python3-pip gfortran git
                sudo pip install fypp
                pushd /tmp
                git clone https://github.com/fortran-lang/stdlib
                cd stdlib
                cmake -B build
                cmake --build build
                sudo cmake --install build
                popd

                cat << 'EOF' > CMakeLists.txt
                cmake_minimum_required(VERSION 3.14.0)
                project(main LANGUAGES Fortran)

                find_package(fortran_stdlib REQUIRED)

                add_executable(${PROJECT_NAME}
                    main.f90
                )

                target_link_libraries(${PROJECT_NAME}
                    PRIVATE
                    fortran_stdlib::fortran_stdlib
                )
                EOF
            """
        ),
        dedent(
            """
                export FFLAGS=\"-O2 -std=f2018\"
                cmake -B build -DCMAKE_BUILD_TYPE=NoConfig
                cmake --build build
            """
        ),
        "build/main",
        {},
        process(
            """
                ./build/main
            """,
        ),
    ),
    Language(
        "ReasonML",
        "ReasonML",
        "reason",
        "3.9.0",
        "main/bin/main.re",
        dedent(
            """
                sudo apt update
                sudo apt install -y opam
                opam init -y
                opam switch create 5.0.0
                eval $(opam env --switch=5.0.0)
                opam install -y reason.3.9.0
                dune init project main
                cd main
                rm bin/main.ml
                cat > dune << 'EOF'
                (env
                 (release
                  (ocamlopt_flags (:standard -O2))))
                EOF
            """
        ),
        dedent(
            """
                cd main
                eval $(opam env)
                dune build --release
            """
        ),
        "main/_build/default/bin/main.exe",
        {},
        process(
            """
                ./main/_build/default/bin/main.exe
            """,
        ),
    ),
    Language(
        "Lua",
        "Lua",
        "LuaJIT",
        "2.1.0-beta3",
        "Main.lua",
        dedent(
            """
                cd /tmp
                curl -R -O https://luajit.org/download/LuaJIT-2.1.0-beta3.tar.gz
                tar zxf LuaJIT-2.1.0-beta3.tar.gz
                cd LuaJIT-2.1.0-beta3
                make
                sudo make install
                sudo ln -sf luajit-2.1.0-beta3 /usr/local/bin/luajit
            """
        ),
        dedent(
            """
                luajit -O3 -b Main.lua luac.out
            """
        ),
        "luac.out",
        {},
        process(
            """
                luajit
                -O3
                luac.out
            """,
        ),
    ),
    Language(
        "C++ 23",
        "C++",
        "gcc",
        "12.2",
        "Main.cpp",
        dedent(
            """
                sudo apt install -y g++-12

                #GMP
                sudo apt install -y libgmp3-dev

                cd /tmp

                # ac library
                sudo mkdir /opt/ac-library
                wget https://github.com/atcoder/ac-library/releases/download/v1.5.1/ac-library.zip -O ac-library.zip
                sudo unzip /tmp/ac-library.zip -d /opt/ac-library

                # boost
                sudo apt install -y build-essential
                wget https://boostorg.jfrog.io/artifactory/main/release/1.82.0/source/boost_1_82_0.tar.gz -O boost_1_82_0.tar.gz
                tar xf boost_1_82_0.tar.gz
                cd boost_1_82_0
                ./bootstrap.sh --with-toolset=gcc --without-libraries=mpi,graph_parallel
                ./b2 -j3 toolset=gcc variant=release link=static runtime-link=static cxxflags=\"-std=c++2b\" stage
                sudo ./b2 -j3 toolset=gcc variant=release link=static runtime-link=static cxxflags=\"-std=c++2b\" --prefix=/opt/boost/gcc install


                #Eigen
                sudo apt install -y libeigen3-dev=3.4.0-2ubuntu2

            """
        ),
        dedent(
            """
                g++-12 -std=gnu++2b -O2 -DONLINE_JUDGE -DATCODER \\
                 -Wall -Wextra \\
                 -mtune=native -march=native \\
                 -fconstexpr-depth=2147483647 -fconstexpr-loop-limit=2147483647 -fconstexpr-ops-limit=2147483647 \\
                 -I/opt/ac-library -I/opt/boost/gcc/include -L/opt/boost/gcc/lib \\
                 -o a.out Main.cpp \\
                -lgmpxx -lgmp \\
                -I/usr/include/eigen3
            """
        ),
        "a.out",
        {},
        process(
            """
                ./a.out
            """,
        ),
    ),
    Language(
        "Common Lisp",
        "Common Lisp",
        "SBCL",
        "2.3.6",
        "Main.lisp",
        dedent(
            """
                pushd /tmp
                sudo apt install -y build-essential
                # sbcl を source から compile するには sbcl が必要
                sudo apt install -y sbcl
                SBCL_VERSION=2.3.6
                wget --trust-server-names https://sourceforge.net/projects/sbcl/files/sbcl/$SBCL_VERSION/sbcl-$SBCL_VERSION-source.tar.bz2/download -O sbcl-$SBCL_VERSION-source.tar.bz2
                tar xf sbcl-$SBCL_VERSION-source.tar.bz2
                cd sbcl-$SBCL_VERSION
                GNUMAKE=make sh make.sh
                sudo sh install.sh
                # apt で入れた sbcl は不要なので削除する
                sudo apt --purge -y remove sbcl
                # /usr/local/bin/sbcl としてインストールされるので、PATH に /usr/local/bin を追加\"

                # Install Libraries
                cd /tmp
                curl -O https://beta.quicklisp.org/quicklisp.lisp
                echo '(quicklisp-quickstart:install)' | sbcl --load quicklisp.lisp
                cat > dump.lisp << 'EOF'
                (progn
                  (let ((quicklisp-init (merge-pathnames \"quicklisp/setup.lisp\"
                                                            (user-homedir-pathname))))
                    (when (probe-file quicklisp-init)
                      (load quicklisp-init)))

                (sb-ext:save-lisp-and-die \"sbcl\" :executable t))
                EOF
                sbcl --script dump.lisp
                popd
                cp -p /tmp/sbcl .
                export SBCL_HOME=/usr/local/lib/sbcl
                ./sbcl --eval '(ql:quickload \"fast-generic-functions\")' --quit
                ./sbcl --eval '(ql:quickload \"trivia\")' --quit
                ./sbcl --eval '(ql:quickload \"iterate\")' --quit
                ./sbcl --eval '(ql:quickload \"cl-ppcre\")' --quit
            """
        ),
        dedent(
            """
                export SBCL_HOME=/usr/local/lib/sbcl
                ./sbcl --noinform --eval '(compile-file \"Main.lisp\")' --quit
                if [ -f Main.fasl ]; then
                  chmod +x Main.fasl
                fi
            """
        ),
        "Main.fasl",
        {
            "SBCL_HOME": "/usr/local/lib/sbcl",
        },
        process(
            """
                ./Main.fasl
            """,
        ),
    ),
    Language(
        "COBOL (Free)",
        "COBOL",
        "GnuCOBOL",
        "3.1.2",
        "Main.cbl",
        dedent(
            """
                sudo apt install gnucobol3
            """
        ),
        dedent(
            """
                cobc -x -free -O2 -o ./a.out ./Main.cbl
            """
        ),
        "a.out",
        {},
        process(
            """
                ./a.out
            """,
        ),
    ),
    Language(
        "C++ 23",
        "C++",
        "Clang",
        "16.0.6",
        "Main.cpp",
        dedent(
            """
                cd /tmp

                # LLVM from llvm official apt repository
                sudo apt install -y lsb-release wget software-properties-common gnupg
                wget https://apt.llvm.org/llvm.sh -O llvm.sh
                # Automate add-apt-repository
                sed -i.bak -e 's/^add-apt-repository /&-y /' llvm.sh
                chmod +x llvm.sh
                sudo ./llvm.sh 16
                sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-16 10
                sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-16 10

                # ac library
                sudo mkdir /opt/ac-library
                wget https://github.com/atcoder/ac-library/releases/download/v1.5.1/ac-library.zip -O ac-library.zip
                sudo unzip ac-library.zip -d /opt/ac-library

                # boost
                wget https://boostorg.jfrog.io/artifactory/main/release/1.82.0/source/boost_1_82_0.tar.gz -O boost_1_82_0.tar.gz
                tar xf boost_1_82_0.tar.gz
                cd boost_1_82_0
                ./bootstrap.sh --with-toolset=clang --without-libraries=mpi,graph_parallel
                ./b2 -j3 toolset=clang variant=release link=static runtime-link=static cxxflags=\"-std=c++2b\" stage
                sudo ./b2 -j3 toolset=clang variant=release link=static runtime-link=static cxxflags=\"-std=c++2b\" --prefix=/opt/boost/clang install

                cd /tmp

                # GMP
                sudo apt install -y libgmp3-dev

                # Eigen
                sudo apt install -y libeigen3-dev

                # Z3。 llvmインストール時に自動で入るようですが念のため。
                sudo apt install -y libz3-4 libz3-dev

                # Utility packages
                sudo apt install -y gdb libbz2-dev liblzma-dev libsqlite3-dev libssl-dev lzma lzma-dev zlib1g-dev liblz4-dev liblzo2-dev

            """
        ),
        dedent(
            """
                clang++ -std=c++2b -Wall -Wextra -O2 -DONLINE_JUDGE -DATCODER -mtune=native -march=native -fconstexpr-depth=2147483647 -fconstexpr-steps=2147483647 -I/opt/boost/clang/include -L/opt/boost/clang/lib -I/opt/ac-library -I/usr/include/eigen3 -fuse-ld=lld -o ./a.out ./Main.cpp
            """
        ),
        "a.out",
        {},
        process(
            """
                ./a.out
            """,
        ),
    ),
    Language(
        "Zsh",
        "Zsh",
        "Zsh",
        "5.9",
        "Main.zsh",
        dedent(
            """
                sudo apt -y install zsh
            """
        ),
        dedent(
            """
                zsh -n Main.zsh || rm Main.zsh
            """
        ),
        "Main.zsh",
        {},
        process(
            """
                zsh
                Main.zsh
            """,
        ),
    ),
    Language(
        "SageMath",
        "SageMath",
        "SageMath",
        "9.5",
        "Main.sage",
        dedent(
            """
                # インストール中にタイムゾーン選択で固まるのを回避するため。タイムゾーン選択済みの環境なら不要
                sudo ln -sf /usr/share/zoneinfo/Etc/UTC /etc/localtime && echo \"Etc/UTC\" | sudo tee /etc/timezone
                sudo apt update && sudo apt install -y sagemath
            """
        ),
        dedent(
            """
                sage --preparse Main.sage && python3 -m py_compile Main.sage.py || rm Main.sage.py
            """
        ),
        "Main.sage.py",
        {},
        process(
            """
                python3
                Main.sage.py
            """,
        ),
    ),
    Language(
        "Sed",
        "Sed",
        "GNU sed",
        "4.8",
        "Main.sed",
        dedent(
            """
                sudo apt install -y sed
            """
        ),
        dedent(
            """

            """
        ),
        "",
        {},
        process(
            """
                sed
                -f
                Main.sed
            """,
        ),
    ),
    Language(
        "bc",
        "bc",
        "bc",
        "1.07.1",
        "Main.bc",
        dedent(
            """
                sudo apt -y install bc
            """
        ),
        dedent(
            """

            """
        ),
        "",
        {},
        process(
            """
                bc
                --mathlib
                Main.bc
            """,
        ),
    ),
    Language(
        "dc",
        "dc",
        "dc",
        "1.07.1",
        "Main.dc",
        dedent(
            """
                sudo apt -y install dc
            """
        ),
        dedent(
            """

            """
        ),
        "",
        {},
        process(
            """
                dc
                -f
                Main.dc
            """,
        ),
    ),
    Language(
        "Perl",
        "Perl",
        "perl ",
        "5.34",
        "Main.pl",
        dedent(
            """
                sudo apt install perl
            """
        ),
        dedent(
            """
                perl -c Main.pl && touch ok
            """
        ),
        "ok",
        {},
        process(
            """
                perl
                Main.pl
            """,
        ),
    ),
    Language(
        "Raku",
        "Raku",
        "Rakudo",
        "2023.06",
        "Main.p6",
        dedent(
            """
                curl -1sLf 'https://dl.cloudsmith.io/public/nxadm-pkgs/rakudo-pkg/setup.deb.sh' | sudo -E bash
                sudo apt update
                sudo apt install rakudo-pkg
            """
        ),
        dedent(
            """
                export PATH=/opt/rakudo-pkg/bin:$PATH
                export RAKUDO_ERROR_COLOR=0
                raku -c Main.p6 && touch ok
            """
        ),
        "ok",
        {
            "PATH": "/opt/rakudo-pkg/bin",
            "RAKUDO_ERROR_COLOR": "0",
        },
        process(
            """
                raku
                Main.p6
            """,
        ),
    ),
    Language(
        "Python",
        "Python",
        "Cython",
        "0.29.34",
        "Main.pyx",
        dedent(
            """
                cd /tmp

                # 依存関係のインストール。 参考:https://devguide.python.org/getting-started/setup-building/#build-dependencies
                sudo env DEBIAN_FRONTEND=noninteractive DEBCONF_NONINTERACTIVE_SEEN=true apt install -y build-essential gdb lcov pkg-config \\
                      libbz2-dev libffi-dev libgdbm-dev libgdbm-compat-dev liblzma-dev \\
                      libncurses5-dev libreadline6-dev libsqlite3-dev libssl-dev \\
                      lzma lzma-dev tk-dev uuid-dev zlib1g-dev git

                # Python 3.11.2をソースからインストール
                wget https://www.python.org/ftp/python/3.11.2/Python-3.11.2.tar.xz -O Python-3.11.2.tar.xz
                tar xf Python-3.11.2.tar.xz
                cd Python-3.11.2

                # 追加したいconfigureのオプションがあればご自由にどうぞ
                ./configure --enable-optimizations --enable-shared
                make
                # 元から入っているpythonとバッティングしないように/usr/local/bin/python3.11にインストール
                sudo make altinstall
                cd ..
                sudo ldconfig

                python3.11 -m pip install \\
                numpy==1.24.1 \\
                scipy==1.10.1 \\
                networkx==3.0 \\
                sympy==1.11.1 \\
                sortedcontainers==2.4.0  \\
                more-itertools==9.0.0 \\
                shapely==2.0.0 \\
                bitarray==2.6.2 \\
                PuLP==2.7.0 \\
                mpmath==1.2.1 \\
                pandas==1.5.2 \\
                z3-solver==4.12.1.0 \\
                scikit-learn==1.2.0 \\
                ortools==9.5.2237 \\
                torch==1.13.1 \\
                polars==0.15.15 \\
                lightgbm==3.3.1 \\
                gmpy2==2.1.5 \\
                git+https://github.com/not522/ac-library-python

                # setuptoolsを更新しないとcppyyのインストールでエラーが出る場合がある
                python3.11 -m pip install -U setuptools==66.0.0
                python3.11 -m pip install cppyy==2.4.1

                python3.11 -m pip install cython==0.29.34
            """
        ),
        dedent(
            """
                python3.11 -c \"from Cython.Build import cythonize;from Cython.Compiler import Options;Options.embed='main';cythonize('Main.pyx', language='c++', compiler_directives={'language_level':'3'})\"
                g++ -Wno-deprecated-declarations -O2 -fPIC -I/usr/local/include/python3.11 -I$HOME/.local/lib/python3.11/site-packages/numpy/core/include -o a.out Main.cpp -lpython3.11
            """
        ),
        "a.out",
        {},
        process(
            """
                ./a.out
            """,
        ),
    ),
    Language(
        "AWK",
        "AWK",
        "GNU Awk",
        "5.0.1",
        "Main.awk",
        dedent(
            """
                sudo apt install -y gawk
            """
        ),
        dedent(
            """

            """
        ),
        "",
        {},
        process(
            """
                awk
                -f
                Main.awk
            """,
        ),
    ),
    Language(
        "Octave",
        "Octave",
        "GNU Octave",
        "8.2.0",
        "Main.m",
        dedent(
            """
                sudo apt update
                sudo apt install -y gcc g++ autoconf automake bison dvipng epstool fig2dev flex gfortran gnuplot-x11 gperf gzip icoutils libarpack2-dev libbison-dev libopenblas-dev libcurl4-gnutls-dev libfftw3-dev libfltk1.3-dev libfontconfig1-dev libfreetype6-dev libgl1-mesa-dev libgl2ps-dev libglpk-dev libgraphicsmagick++1-dev libhdf5-dev liblapack-dev libosmesa6-dev libpcre3-dev libqhull-dev libqscintilla2-qt5-dev libqrupdate-dev libreadline-dev librsvg2-bin libsndfile1-dev libsuitesparse-dev libsundials-dev libtool libxft-dev make openjdk-8-jdk perl portaudio19-dev pstoedit qtbase5-dev qttools5-dev qttools5-dev-tools rapidjson-dev rsync tar texinfo texlive-latex-extra zlib1g-dev
                cd /tmp
                wget https://ftpmirror.gnu.org/octave/octave-8.2.0.tar.gz && \\
                tar -xzf octave-8.2.0.tar.gz                               && \\
                cd octave-8.2.0
                mkdir .build
                cd .build
                ../configure
                make -j2
                sudo make install
            """
        ),
        dedent(
            """
                octave -W --eval 'disp(\"Hello, world!\")'
            """
        ),
        "",
        {},
        process(
            """
                octave
                -W
                Main.m
            """,
        ),
    ),
    Language(
        "Vim",
        "Vim",
        "vim",
        "9.0.0242",
        "Main.vim",
        dedent(
            """
                sudo apt install vim-nox -y
            """
        ),
        dedent(
            """

            """
        ),
        "",
        {},
        process(
            """
                bash
                -c
                cat - > /tmp/out; TERM=dumb vim -N -u NONE -i NONE -s Main.vim /tmp/out > /dev/null 2>&1; cat /tmp/out
            """,
        ),
    ),
    Language(
        "なでしこ",
        "なでしこ",
        "cnako3",
        "3.4.20",
        "Main.nako3",
        dedent(
            """
                curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash - &&\\
                sudo apt-get install -y nodejs
                sudo npm install -g nadesiko3
            """
        ),
        dedent(
            """
                cnako3 -c Main.nako3
            """
        ),
        "Main.mjs",
        {},
        process(
            """
                node
                --stack-size={memory:kb}
                Main.mjs
            """,
        ),
    ),
    Language(
        "Assembly x64",
        "Assembly x64",
        "NASM",
        "2.15.05",
        "Main.asm",
        dedent(
            """
                sudo apt install nasm build-essential
            """
        ),
        dedent(
            """
                nasm -f elf64 Main.asm && gcc -o a.out Main.o -lm
            """
        ),
        "a.out",
        {},
        process(
            """
                ./a.out
            """,
        ),
    ),
    Language(
        "Pascal",
        "Pascal",
        "fpc",
        "3.2.2",
        "Main.p",
        dedent(
            """
                sudo apt install fp-compiler-3.2.2
            """
        ),
        dedent(
            """
                fpc -O2 -Sd -Sh -v0z -oa.out Main.p
            """
        ),
        "a.out",
        {},
        process(
            """
                ./a.out
            """,
        ),
    ),
    Language(
        "C# 11.0 AOT",
        "C#",
        ".NET",
        "7.0.7",
        "Main.cs",
        dedent(
            """
                # パッケージリポジトリの設定
                wget -q https://packages.microsoft.com/config/ubuntu/22.10/packages-microsoft-prod.deb -O packages-microsoft-prod.deb
                sudo dpkg -i packages-microsoft-prod.deb
                rm packages-microsoft-prod.deb
                sudo sh -c \"cat > /etc/apt/preferences.d/dotnet <<'EOF'
                Package: dotnet*
                Pin: origin packages.microsoft.com
                Pin-Priority: 1001
                EOF\"
                sudo sh -c \"cat > /etc/apt/preferences.d/aspnet <<'EOF'
                Package: aspnet*
                Pin: origin packages.microsoft.com
                Pin-Priority: 1001
                EOF\"

                # SDK のインストール
                sudo apt-get update && sudo apt-get install -y dotnet-sdk-7.0=7.0.304-1 clang zlib1g-dev

                # カレントディレクトリーにプロジェクトファイルを設置
                cat > Main.csproj << EOS
                <Project Sdk=\"Microsoft.NET.Sdk\">
                  <PropertyGroup>
                    <OutputType>Exe</OutputType>
                    <TargetFramework>net7.0</TargetFramework>
                    <ImplicitUsings>enable</ImplicitUsings>
                    <Nullable>annotations</Nullable>
                    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
                    <DefineConstants>ONLINE_JUDGE;ATCODER</DefineConstants>
                    <RuntimeIdentifier>ubuntu-x64</RuntimeIdentifier>
                    <PublishAot>true</PublishAot>
                    <IlcOptimizationPreference>Speed</IlcOptimizationPreference>
                    <SatelliteResourceLanguages>en-US</SatelliteResourceLanguages>
                    <InvariantGlobalization>true</InvariantGlobalization>
                    <WarningsAsErrors>IL2104;IL3053</WarningsAsErrors>
                  </PropertyGroup>
                  <ItemGroup>
                    <PackageReference Include=\"ac-library-csharp\" Version=\"3.0.0-atcoder8\" />
                    <PackageReference Include=\"MathNet.Numerics\" Version=\"5.0.0\" />
                  </ItemGroup>
                </Project>
                EOS

                # プロジェクトをリストア。あらかじめコンパイルを通してWJの短縮を試みる
                echo 'Console.WriteLine(\"Hello, world!\");' > Main.cs
                export DOTNET_EnableWriteXorExecute=0
                dotnet publish -c Release -o tmp -v q --nologo 1>&2
                rm Main.cs
            """
        ),
        dedent(
            """
                export DOTNET_EnableWriteXorExecute=0
                dotnet publish -c Release -o publish -v q --nologo 1>&2
            """
        ),
        "publish/Main",
        {
            "DOTNET_EnableWriteXorExecute": "0",
        },
        process(
            """
                ./publish/Main
            """,
        ),
    ),
    Language(
        "Lua",
        "Lua",
        "Lua",
        "5.4.6",
        "Main.lua",
        dedent(
            """
                curl -R -O http://www.lua.org/ftp/lua-5.4.6.tar.gz
                tar zxf lua-5.4.6.tar.gz
                cd lua-5.4.6
                make all test
            """
        ),
        dedent(
            """
                export PATH=$PATH:/judge/lua-5.4.6/src
                luac -o luac.out Main.lua
            """
        ),
        "luac.out",
        {
            "PATH": "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/judge/lua-5.4.6/src",
        },
        process(
            """
                lua
                luac.out
            """,
        ),
    ),
    Language(
        "Prolog",
        "Prolog",
        "SWI-Prolog",
        "9.0.4",
        "Main.pl",
        dedent(
            """
                sudo apt-get install -y software-properties-common
                sudo apt-add-repository ppa:swi-prolog/stable
                sudo apt-get update
                sudo apt-get install swi-prolog
            """
        ),
        dedent(
            """
                swipl -O -g main -o a.out -c Main.pl
                # source 内で main :-
            """
        ),
        "a.out",
        {},
        process(
            """
                ./a.out
            """,
        ),
    ),
    Language(
        "Emacs Lisp (Native Compile)",
        "Emacs Lisp",
        "GNU Emacs",
        "28.2",
        "Main.el",
        dedent(
            """
                # Install Emacs
                sudo apt-get update
                sudo apt-get install -y autoconf build-essential libgccjit-12-dev libgnutls28-dev libtinfo-dev pkg-config texinfo wget zlib1g-dev
                cd /tmp
                wget https://ftp.gnu.org/gnu/emacs/emacs-28.2.tar.gz
                tar xvf emacs-28.2.tar.gz
                cd emacs-28.2
                ./configure --with-native-compilation
                make bootstrap NATIVE_FULL_AOT=1
                sudo make install
                # Install libraries
                emacs --batch --eval \"\\
                (progn
                  (package-initialize)
                  (add-to-list 'package-archives '(\\\"melpa\\\" . \\\"https://melpa.org/packages/\\\") t)
                  (package-refresh-contents)
                  (mapc #'package-install
                        '(dash
                          ht
                          recur
                          s)))\"
                emacs --batch --eval \"(package-initialize)\" -f batch-byte-compile ~/.emacs.d/elpa/**/*.el
                emacs --batch --eval \"(package-initialize)\" -f batch-native-compile ~/.emacs.d/elpa/**/*.el
            """
        ),
        dedent(
            """
                emacs --batch -f package-initialize --eval '(native-compile \"Main.el\" (expand-file-name \"Main.eln\"))' 
            """
        ),
        "Main.eln",
        {},
        process(
            """
                emacs
                --batch
                -f
                package-initialize
                -l
                Main.eln
            """,
        ),
    ),
    Language(
        "PowerShell",
        "PowerShell",
        "PowerShell",
        "7.3.1",
        "Main.ps1",
        dedent(
            """
                cd /tmp

                sudo apt install -y unzip
                wget https://github.com/kzrnm/ac-library-csharp/releases/download/v3.0.0-atcoder8/ac-library-csharp.3.0.0-atcoder8.nupkg
                unzip ac-library-csharp.3.0.0-atcoder8.nupkg
                mv lib/net7.0/ac-library-csharp.dll /judge/

                mkdir $HOME/.powershell
                wget https://github.com/PowerShell/PowerShell/releases/download/v7.3.1/powershell-7.3.1-linux-x64.tar.gz
                tar xvzf powershell-7.3.1-linux-x64.tar.gz -C $HOME/.powershell

                sudo ln -s $HOME/.powershell/pwsh /usr/local/bin/pwsh
            """
        ),
        dedent(
            """

            """
        ),
        "",
        {},
        process(
            """
                pwsh
                ./Main.ps1
            """,
        ),
    ),
    Language(
        "Scheme",
        "Scheme",
        "Gauche",
        "0.9.12",
        "Main.scm",
        dedent(
            """
                sudo apt install build-essential libgdbm-dev zlib1g-dev texinfo -y
                curl https://raw.githubusercontent.com/shirok/get-gauche/master/get-gauche.sh -o /tmp/get-gauche.sh
                cd /tmp
                bash get-gauche.sh --auto --skip-tests --prefix /usr/local --sudo --version 0.9.12
            """
        ),
        dedent(
            """

            """
        ),
        "",
        {},
        process(
            """
                gosh
                ./Main.scm
            """,
        ),
    ),
    Language(
        "Scala 3.3.0",
        "Scala",
        "Scala Native",
        "0.4.14",
        "main/src/main/scala/Main.scala",
        dedent(
            """
                sudo apt-get update
                sudo apt-get install -y apt-transport-https curl gnupg -yqq
                echo \"deb https://repo.scala-sbt.org/scalasbt/debian all main\" | sudo tee /etc/apt/sources.list.d/sbt.list
                echo \"deb https://repo.scala-sbt.org/scalasbt/debian /\" | sudo tee /etc/apt/sources.list.d/sbt_old.list
                curl -sL \"https://keyserver.ubuntu.com/pks/lookup?op=get&search=0x2EE0EA64E40A89B84B2DF73499E82A75642AC823\" | sudo -H gpg --no-default-keyring --keyring gnupg-ring:/etc/apt/trusted.gpg.d/scalasbt-release.gpg --import
                sudo chmod 644 /etc/apt/trusted.gpg.d/scalasbt-release.gpg
                sudo apt-get update
                sudo apt-get install -y sbt openjdk-20-jdk-headless clang
                # 以下で作成したものを保存しておいて、Compile 時に使用
                mkdir main && cd main
                cat << EOF > build.sbt
                import scala.scalanative.build._

                scalaVersion := \"3.3.0\"

                enablePlugins(ScalaNativePlugin)

                nativeConfig ~= {
                    _.withMode(Mode.releaseFast)
                }
                EOF
                mkdir -p project src/main/scala
                cat << EOF > project/plugins.sbt
                addSbtPlugin(\"org.scala-native\" % \"sbt-scala-native\" % \"0.4.14\")
                EOF
                cat << EOF > project/build.properties
                sbt.version = 1.9.2
                EOF
                cat << EOF > src/main/scala/Main.scala
                object Main {
                  def main(args: Array[String]): Unit =
                    println(\"Hello, world!\")
                }
                EOF
                # 以下で library などがダウンロードされるので保存しておいて、Compile 時に使用
                # ($HOME/ 以下の .g8/,  .ivy2/,  .cache/coursier/ に色々できるので、全て保存しておく)
                sbt nativeLink
                rm target/scala-3.3.0/main-out
            """
        ),
        dedent(
            """
                cd main && sbt \"set offline := true\" nativeLink 1>&2
            """
        ),
        "main/target/scala-3.3.0/main-out",
        {},
        process(
            """
                ./main/target/scala-3.3.0/main-out
            """,
        ),
    ),
    Language(
        "Visual Basic 16.9",
        "Visual Basic",
        ".NET",
        "7.0.7",
        "Main.vb",
        dedent(
            """
                # パッケージリポジトリの設定
                wget -q https://packages.microsoft.com/config/ubuntu/22.10/packages-microsoft-prod.deb -O packages-microsoft-prod.deb
                sudo dpkg -i packages-microsoft-prod.deb
                rm packages-microsoft-prod.deb
                sudo sh -c \"cat > /etc/apt/preferences.d/dotnet <<'EOF'
                Package: dotnet*
                Pin: origin packages.microsoft.com
                Pin-Priority: 1001
                EOF\"
                sudo sh -c \"cat > /etc/apt/preferences.d/aspnet <<'EOF'
                Package: aspnet*
                Pin: origin packages.microsoft.com
                Pin-Priority: 1001
                EOF\"

                # SDK のインストール
                sudo apt-get update && sudo apt-get install -y dotnet-sdk-7.0=7.0.304-1

                # カレントディレクトリーにプロジェクトファイルを設置
                cat > Main.vbproj << EOS
                <Project Sdk=\"Microsoft.NET.Sdk\">
                  <PropertyGroup>
                    <OutputType>Exe</OutputType>
                    <TargetFramework>net7.0</TargetFramework>
                    <DefineConstants>ONLINE_JUDGE,ATCODER</DefineConstants>
                    <RuntimeIdentifier>ubuntu-x64</RuntimeIdentifier>
                    <PublishReadyToRun>true</PublishReadyToRun>
                    <SatelliteResourceLanguages>en-US</SatelliteResourceLanguages>
                    <InvariantGlobalization>true</InvariantGlobalization>
                  </PropertyGroup>
                  <ItemGroup>
                    <PackageReference Include=\"ac-library-csharp\" Version=\"3.0.0-atcoder8\" />
                    <PackageReference Include=\"MathNet.Numerics\" Version=\"5.0.0\" />
                    <PackageReference Include=\"Microsoft.ML\" Version=\"2.0.1\" />
                    <PackageReference Include=\"Microsoft.ML.LightGbm\" Version=\"2.0.1\" />
                  </ItemGroup>
                </Project>
                EOS

                # プロジェクトをリストア。あらかじめコンパイルを通してWJの短縮を試みる
                cat > Main.vb << EOS
                Imports System

                Module Program
                    Sub Main(args As String())
                        Console.WriteLine(\"Hello World!\")
                    End Sub
                End Module
                EOS
                export DOTNET_EnableWriteXorExecute=0
                dotnet publish -c Release -o tmp -v q --nologo 1>&2
                rm Main.vb
            """
        ),
        dedent(
            """
                export DOTNET_EnableWriteXorExecute=0
                dotnet publish -c Release -o publish -v q --nologo 1>&2
            """
        ),
        "publish/Main",
        {
            "DOTNET_EnableWriteXorExecute": "0",
        },
        process(
            """
                ./publish/Main
            """,
        ),
    ),
    Language(
        "Forth",
        "Forth",
        "gforth",
        "0.7.3",
        "Main.fs",
        dedent(
            """
                sudo apt -y install gforth
            """
        ),
        dedent(
            """

            """
        ),
        "",
        {},
        process(
            """
                gforth-fast
                Main.fs
                -e
                bye
            """,
        ),
    ),
    Language(
        "Haxe (JVM)",
        "Haxe",
        "Haxe",
        "4.3.1",
        "Main.hx",
        dedent(
            """
                sudo apt-get update
                sudo apt install -y neko openjdk-19-jre-headless wget
                wget https://github.com/HaxeFoundation/haxe/releases/download/4.3.1/haxe-4.3.1-linux64.tar.gz
                sudo tar -C /opt -xf haxe-4.3.1-linux64.tar.gz                  
                export PATH=/opt/haxe_20230428195743_964c84c:$PATH
                mkdir ~/haxelib && haxelib setup ~/haxelib
                haxelib install hxjava
            """
        ),
        dedent(
            """
                export PATH=/opt/haxe_20230428195743_964c84c:$PATH
                haxe -D analyzer-optimize --jvm Main.jar --main Main
            """
        ),
        "Main.jar",
        {},
        process(
            """
                java
                -jar
                Main.jar
            """,
        ),
    ),
    Language(
        "Python",
        "Python",
        "Mambaforge / CPython",
        "3.10.10",
        "Main.py",
        dedent(
            """
                sudo apt install -y git

                wget https://github.com/conda-forge/miniforge/releases/download/23.1.0-1/Mambaforge-23.1.0-1-Linux-x86_64.sh
                bash Mambaforge-23.1.0-1-Linux-x86_64.sh -b

                source ~/mambaforge/bin/activate
                mamba install -y \\
                numpy==1.24.3 \\
                numba==0.57.0 \\
                scipy==1.10.1 \\
                networkx==3.1 \\
                sympy==1.11.1 \\
                sortedcontainers==2.4.0 \\
                more-itertools==9.1.0 \\
                shapely==2.0.1 \\
                bitarray==2.7.3 \\
                pulp==2.7.0 \\
                mpmath==1.3.0 \\
                pandas==2.0.0 \\
                scikit-learn==1.2.2 \\
                scikit-learn-intelex==2023.0.2 \\
                ortools-python==9.6 \\
                cppyy==2.4.2 \\
                polars==0.16.18 \\
                lightgbm==3.3.5 \\
                cython==0.29.34 \\
                graphblas==7.4.4 \\
                pytorch==2.0.0 
                pip install git+https://github.com/not522/ac-library-python
            """
        ),
        dedent(
            """
                ~/mambaforge/bin/python3.10 Main.py ONLINE_JUDGE 2> /dev/null
            """
        ),
        "",
        {},
        process(
            """
                /home/runner/mambaforge/bin/python3.10
                Main.py
            """,
        ),
    ),
    Language(
        "Clojure",
        "Clojure",
        "babashka",
        "1.3.181",
        "Main.clj",
        dedent(
            """
                curl -sLO https://raw.githubusercontent.com/babashka/babashka/master/install
                chmod +x install
                sudo ./install --version 1.3.181
                rm install
            """
        ),
        dedent(
            """

            """
        ),
        "",
        {},
        process(
            """
                bb
                Main.clj
            """,
        ),
    ),
    Language(
        "Elixir",
        "Elixir",
        "Elixir",
        "1.15.2",
        "lib/judge.ex",
        dedent(
            """
                # x86_64アーキテクチャを前提にしています

                sudo apt update

                # asdf

                sudo apt install git curl git -y
                git clone https://github.com/asdf-vm/asdf.git ~/.asdf --branch v0.11.2
                . \"$HOME/.asdf/asdf.sh\"
                . \"$HOME/.asdf/completions/asdf.bash\"

                # Erlang

                sudo apt -y install build-essential autoconf m4 libncurses5-dev libwxgtk3.0-gtk3-dev libgl1-mesa-dev libglu1-mesa-dev libpng-dev libssh-dev unixodbc-dev xsltproc fop libxml2-utils libncurses-dev openjdk-11-jdk libwxgtk-webview3.0-gtk3-dev erlang-dev erlang-xmerl erlang-parsetools erlang-os-mon inotify-tools

                ## ここでサービスを再起動するように言われるかもしれない

                asdf plugin-add erlang https://github.com/asdf-vm/asdf-erlang.git
                asdf install erlang 26.0.2
                asdf global erlang 26.0.2
                # Elixir

                sudo apt install -y unzip
                pushd /tmp
                wget https://github.com/elixir-lang/elixir/releases/download/v1.15.2/elixir-otp-26.zip
                sudo unzip elixir-otp-26.zip -d /opt/elixir
                popd
                export PATH=/opt/elixir/bin:$PATH

                # Setting up Elixir

                mix local.hex --force
                mix local.rebar --force

                # Generate new project

                mix new .
                sed -e 's/# {:dep_from_hexpm, .*},/{:flow, \"~> 1.2.4\"}, {:nx, \"~> 0.5.3\"}, {:exla, \"~> 0.5.3\"},/'  -e 's/# {:dep_from_git, .*}//' -e 's/extra_applications: \\[:logger\\]/extra_applications: [:logger, :mnesia]/' mix.exs > mix.exs.new
                mv mix.exs.new mix.exs
                mkdir config
                echo \"import Config\" > config/config.exs
                echo \"config :nx, :default_backend, EXLA.Backend\" >> config/config.exs
                echo \"config :logger, level: :error\" >> config/config.exs
                mix format
                mix deps.get
                mix compile
                rm -fr _build/dev/lib/judge
            """
        ),
        dedent(
            """
                export PATH=/home/runner/.asdf/installs/erlang/26.0.2/bin:/opt/elixir/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
                mix compile
            """
        ),
        "_build/dev/lib/judge/ebin/Elixir.Main.beam",
        {
            "PATH": "/home/runner/.asdf/installs/erlang/26.0.2/bin:/opt/elixir/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
        },
        process(
            """
                mix
                run
                -e
                Main.main
            """,
        ),
    ),
    Language(
        "Erlang",
        "Erlang",
        "Erlang",
        "26.0.2",
        "Main.erl",
        dedent(
            """
                # x86_64アーキテクチャを前提にしています

                sudo apt update

                # asdf

                sudo apt install git curl git -y
                git clone https://github.com/asdf-vm/asdf.git ~/.asdf --branch v0.11.2
                . \"$HOME/.asdf/asdf.sh\"
                . \"$HOME/.asdf/completions/asdf.bash\"

                # Erlang

                sudo apt -y install build-essential autoconf m4 libncurses5-dev libwxgtk3.0-gtk3-dev libgl1-mesa-dev libglu1-mesa-dev libpng-dev libssh-dev unixodbc-dev xsltproc fop libxml2-utils libncurses-dev openjdk-11-jdk libwxgtk-webview3.0-gtk3-dev erlang-dev erlang-xmerl erlang-parsetools erlang-os-mon inotify-tools

                ## ここでサービスを再起動するように言われるかもしれない

                asdf plugin-add erlang https://github.com/asdf-vm/asdf-erlang.git
                asdf install erlang 26.0.2
                asdf global erlang 26.0.2
            """
        ),
        dedent(
            """
                export PATH=/home/runner/.asdf/installs/erlang/26.0.2/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
                erlc Main.erl 1>&2
            """
        ),
        "Main.beam",
        {
            "PATH": "/home/runner/.asdf/installs/erlang/26.0.2/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
        },
        process(
            """
                erl
                -noshell
                -run
                Main
                main
                run
            """,
        ),
    ),
    Language(
        "Clojure",
        "Clojure",
        "clojure",
        "1.11.1",
        "Main.clj",
        dedent(
            """
                sudo apt install -y openjdk-17-jre-headless
                cd /tmp
                curl -O https://download.clojure.org/install/linux-install-1.11.1.1347.sh
                chmod +x linux-install-1.11.1.1347.sh
                sudo ./linux-install-1.11.1.1347.sh
                echo '(println \"hello\")' > hello.clj
                clojure -M hello.clj
            """
        ),
        dedent(
            """

            """
        ),
        "",
        {},
        process(
            """
                clojure
                -J-Xss{memory:mb}M
                -M
                Main.clj
            """,
        ),
    ),
    Language(
        "TypeScript 5.1",
        "TypeScript",
        "Deno",
        "1.35.1",
        "Main.ts",
        dedent(
            """
                sudo apt-get install unzip
                curl -fsSL https://deno.land/install.sh | sh -s v1.35.1
                export NO_COLOR=true
                export DENO_NO_UPDATE_CHECK=1
                export PATH=$PATH:/home/runner/.deno/bin

                deno cache npm:tstl@2.5.13
                deno cache npm:mathjs@11.8.2
                # deno_stdをキャッシュに入れておく。
                cd /tmp
                wget https://github.com/denoland/deno_std/archive/refs/tags/0.194.0.tar.gz
                tar xf 0.194.0.tar.gz
                find deno_std-0.194.0 -name \"*.ts\" >> stdfiles
                find deno_std-0.194.0 -name \"*.js\" >> stdfiles
                sed -i -e \"s%deno_std-\\(.*\\)%import 'https://deno.land/std@\\1';%\" stdfiles
                deno cache stdfiles
            """
        ),
        dedent(
            """
                export NO_COLOR=true
                export DENO_NO_UPDATE_CHECK=1
                export PATH=$PATH:/home/runner/.deno/bin

                # キャッシュしつつ、import・型・構文などをチェック
                if deno cache --quiet --check Main.ts > check-output 2>&1 ; then
                    touch ok
                else
                  cat check-output 1>&2
                  if grep -q \"error sending request for url (http\" check-output 2>/dev/null; then
                    # ライブラリをダウンロードしようとした場合はヒントを表示
                    echo \"---\" 1>&2
                    echo \"Tips from the judge system: The only available external libraries are:\" 1>&2
                    echo \"- std@0.194.0\" 1>&2
                    echo \"- npm:tstl@2.5.13\" 1>&2
                    echo \"- npm:mathjs@11.8.2\" 1>&2
                    echo \"Please make sure to specify the version number when importing.\" 1>&2
                  fi
                fi
            """
        ),
        "ok",
        {
            "PATH": "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/home/runner/.deno/bin",
            "NO_COLOR": "true",
            "DENO_NO_UPDATE_CHECK": "1",
        },
        process(
            """
                deno
                run
                --allow-all
                --quiet
                --no-prompt
                --v8-flags=--stack-size={memory:kb}
                Main.ts
                ONLINE_JUDGE
                ATCODER
            """,
        ),
    ),
    Language(
        "プロデル",
        "プロデル",
        "mono版プロデル",
        "1.9.1182",
        "produire-mono/Main.rdr",
        dedent(
            """
                # install mono
                sudo apt-get install -y gnupg ca-certificates
                sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF
                echo deb \"https://download.mono-project.com/repo/ubuntu stable-focal main\" | sudo tee /etc/apt/sources.list.d/mono-official-stable.list
                sudo apt-get update
                sudo apt-get install -y mono-devel libgtk2.0-dev

                # expand produire
                wget https://rdr.utopiat.net/files/mono//produire-mono-1.9.1182.tar.gz
                tar zxvf produire-mono-1.9.1182.tar.gz
                rm produire-mono-1.9.1182.tar.gz
            """
        ),
        dedent(
            """
                mono produire-mono/rdrc.exe /mono /console produire-mono/Main.rdr > compile-out
                result=$(tail -1 compile-out)
                if [ \"$result\" = \"失敗しました。\" ]; then
                  rm produire-mono/Main.exe
                  cat compile-out 1>&2
                fi
            """
        ),
        "produire-mono/Main.exe",
        {},
        process(
            """
                mono
                produire-mono/Main.exe
            """,
        ),
    ),
    Language(
        "C++ 17",
        "C++",
        "gcc",
        "12.2",
        "Main.cpp",
        dedent(
            """
                sudo apt install -y g++-12

                cd /tmp

                # ac library
                sudo mkdir /opt/ac-library
                wget https://github.com/atcoder/ac-library/releases/download/v1.5.1/ac-library.zip
                sudo unzip /tmp/ac-library.zip -d /opt/ac-library

                # boost
                sudo apt install -y build-essential
                wget https://boostorg.jfrog.io/artifactory/main/release/1.82.0/source/boost_1_82_0.tar.gz
                tar xf boost_1_82_0.tar.gz
                cd boost_1_82_0
                ./bootstrap.sh --with-toolset=gcc --without-libraries=mpi,graph_parallel
                ./b2 -j3 toolset=gcc variant=release link=static runtime-link=static cxxflags=\"-std=c++17\" stage
                sudo ./b2 -j3 toolset=gcc variant=release link=static runtime-link=static cxxflags=\"-std=c++17\" --prefix=/opt/boost/gcc install
            """
        ),
        dedent(
            """
                g++ -std=gnu++17 -Wall -Wextra -O2 -DONLINE_JUDGE -I/opt/boost/gcc/include -L/opt/boost/gcc/lib -I/opt/ac-library -o a.out Main.cpp
            """
        ),
        "a.out",
        {},
        process(
            """
                ./a.out
            """,
        ),
    ),
    Language(
        "ECLiPSe",
        "ECLiPSe",
        "ECLiPSe",
        "7.1_13",
        "Main.ecl",
        dedent(
            """
                mkdir eclipse
                wget https://eclipseclp.org/Distribution/Builds/7.1_13/x86_64_linux/eclipse_basic.tgz
                tar xpfz eclipse_basic.tgz -C eclipse
                rm eclipse_basic.tgz
                cd eclipse/
                yes \"\"\"\" | ./RUNME --no-docs
                # tk, javaは無視

                # eplex
                # /judge/eclipse内で
                wget https://eclipseclp.org/Distribution/Builds/7.1_13/x86_64_linux/if_osiclpcbc.tgz
                tar xpfz if_osiclpcbc.tgz
                rm if_osiclpcbc.tgz
            """
        ),
        dedent(
            """
                export PATH=$PATH:/judge/eclipse/bin/x86_64_linux
                echo \"compile('Main.ecl', [output: eco, debug: off])\" | eclipse -f Main.ecl
            """
        ),
        "Main.eco",
        {
            "PATH": "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/judge/eclipse/bin/x86_64_linux",
        },
        process(
            """
                eclipse
                -f
                Main.eco
                -e
                main
            """,
        ),
    ),
    Language(
        "Nibbles (literate form)",
        "Nibbles",
        "nibbles",
        "1.01",
        "Main.nbl",
        dedent(
            """
                sudo apt-get update
                sudo apt-get install -y build-essential curl libffi-dev libffi8ubuntu1 libgmp-dev libgmp10 libncurses-dev libncurses5 libtinfo5 llvm-13 git
                curl --proto '=https' --tlsv1.2 -sSf https://get-ghcup.haskell.org | env BOOTSTRAP_HASKELL_NONINTERACTIVE=1 BOOTSTRAP_HASKELL_GHC_VERSION=8.10.7 BOOTSTRAP_HASKELL_INSTALL_NO_STACK=1 sh
                git clone https://github.com/darrenks/nibbles.git .
                git config --global --add safe.directory /judge
                git checkout 2e6c9dd77fafd1b15273c29b16062804b1fa07c9
                ~/.ghcup/bin/ghcup run --ghc 8.10.7 --cabal latest --install -- cabal install --lib dlist split murmur-hash memoize ghc base template-haskell containers bytestring process filepath
                ~/.ghcup/bin/ghcup run --ghc 8.10.7 -- ghc -O2 *.hs
            """
        ),
        dedent(
            """
                ./nibbles -hs Main.nbl && ~/.ghcup/bin/ghcup --offline run --quick --ghc 8.10.7 -- ghc -O2 out.hs
            """
        ),
        "out",
        {},
        process(
            """
                ./out
            """,
        ),
    ),
    Language(
        "Ada",
        "Ada",
        "GNAT",
        "12.2",
        "Main.adb",
        dedent(
            """
                sudo apt install -y gnat-12
            """
        ),
        dedent(
            """
                gnat make -O2 -o a.out Main.adb
            """
        ),
        "a.out",
        {},
        process(
            """
                ./a.out
            """,
        ),
    ),
    Language(
        "jq",
        "jq",
        "jq",
        "1.6",
        "Main.jq",
        dedent(
            """
                sudo apt -y install jq
            """
        ),
        dedent(
            """

            """
        ),
        "Main.jq",
        {},
        process(
            """
                jq
                -MrRs
                -f
                Main.jq
            """,
        ),
    ),
    Language(
        "Cyber",
        "Cyber",
        "Cyber",
        "v0.2-Latest",
        "Main.cy",
        dedent(
            """
                curl -fsSL https://cyberscript.dev/install.sh | bash
            """
        ),
        dedent(
            """
                if cyber compile Main.cy > compile-out 2>&1; then
                  touch ok
                else
                  cat compile-out 1>&2
                fi
            """
        ),
        "ok",
        {},
        process(
            """
                cyber
                Main.cy
            """,
        ),
    ),
    Language(
        "Carp",
        "Carp",
        "Carp",
        "0.5.5",
        "Main.carp",
        dedent(
            """
                cd /tmp
                sudo apt install -y unzip clang
                wget https://github.com/carp-lang/Carp/releases/download/v0.5.5/carp-v0.5.5-x86_64-linux.zip
                sudo unzip -d /opt carp-v0.5.5-x86_64-linux.zip
                sudo ln -s /opt/carp-v0.5.5-x86_64-linux/bin/carp /usr/local/bin/carp
            """
        ),
        dedent(
            """
                export CARP_DIR=/opt/carp-v0.5.5-x86_64-linux
                carp -b --optimize Main.carp 1>&2
            """
        ),
        "./out/Untitled",
        {},
        process(
            """
                ./out/Untitled
            """,
        ),
    ),
    Language(
        "C++ 17",
        "C++",
        "Clang",
        "16.0.6",
        "Main.cpp",
        dedent(
            """
                cd /tmp

                # LLVM from llvm official apt repository
                sudo apt install -y lsb-release wget software-properties-common gnupg
                wget https://apt.llvm.org/llvm.sh -O llvm.sh
                # Automate add-apt-repository
                sed -i.bak -e 's/^add-apt-repository /&-y /' llvm.sh
                chmod +x llvm.sh
                sudo ./llvm.sh 16
                sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-16 10
                sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-16 10

                # ac library
                sudo mkdir /opt/ac-library
                wget https://github.com/atcoder/ac-library/releases/download/v1.5.1/ac-library.zip -O ac-library.zip
                sudo unzip ac-library.zip -d /opt/ac-library

                # boost
                wget https://boostorg.jfrog.io/artifactory/main/release/1.82.0/source/boost_1_82_0.tar.gz -O boost_1_82_0.tar.gz
                tar xf boost_1_82_0.tar.gz
                cd boost_1_82_0
                ./bootstrap.sh --with-toolset=clang --without-libraries=mpi,graph_parallel
                ./b2 -j3 toolset=clang variant=release link=static runtime-link=static cxxflags=\"-std=c++17\" stage
                sudo ./b2 -j3 toolset=clang variant=release link=static runtime-link=static cxxflags=\"-std=c++17\" --prefix=/opt/boost/clang install

                cd /tmp

                # GMP
                sudo apt install -y libgmp3-dev

                # Eigen
                sudo apt install -y libeigen3-dev

                # Z3。 llvmインストール時に自動で入るようですが念のため。
                sudo apt install -y libz3-4 libz3-dev

                # Utility packages
                sudo apt install -y gdb libbz2-dev liblzma-dev libsqlite3-dev libssl-dev lzma lzma-dev zlib1g-dev liblz4-dev liblzo2-dev

            """
        ),
        dedent(
            """
                clang++ -std=c++17 -Wall -Wextra -O2 -DONLINE_JUDGE -DATCODER -mtune=native -march=native -fconstexpr-depth=2147483647 -fconstexpr-steps=2147483647 -I/opt/boost/clang/include -L/opt/boost/clang/lib -I/opt/ac-library -I/usr/include/eigen3 -fuse-ld=lld -o ./a.out ./Main.cpp
            """
        ),
        "a.out",
        {},
        process(
            """
                ./a.out
            """,
        ),
    ),
    Language(
        "C++ 20",
        "C++",
        "Clang",
        "16.0.6",
        "Main.cpp",
        dedent(
            """
                cd /tmp

                # LLVM from llvm official apt repository
                sudo apt install -y lsb-release wget software-properties-common gnupg
                wget https://apt.llvm.org/llvm.sh -O llvm.sh
                # Automate add-apt-repository
                sed -i.bak -e 's/^add-apt-repository /&-y /' llvm.sh
                chmod +x llvm.sh
                sudo ./llvm.sh 16
                sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-16 10
                sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-16 10

                # ac library
                sudo mkdir /opt/ac-library
                wget https://github.com/atcoder/ac-library/releases/download/v1.5.1/ac-library.zip -O ac-library.zip
                sudo unzip ac-library.zip -d /opt/ac-library

                # boost
                wget https://boostorg.jfrog.io/artifactory/main/release/1.82.0/source/boost_1_82_0.tar.gz -O boost_1_82_0.tar.gz
                tar xf boost_1_82_0.tar.gz
                cd boost_1_82_0
                ./bootstrap.sh --with-toolset=clang --without-libraries=mpi,graph_parallel
                ./b2 -j3 toolset=clang variant=release link=static runtime-link=static cxxflags=\"-std=c++20\" stage
                sudo ./b2 -j3 toolset=clang variant=release link=static runtime-link=static cxxflags=\"-std=c++20\" --prefix=/opt/boost/clang install

                cd /tmp

                # GMP
                sudo apt install -y libgmp3-dev

                # Eigen
                sudo apt install -y libeigen3-dev

                # Z3。 llvmインストール時に自動で入るようですが念のため。
                sudo apt install -y libz3-4 libz3-dev

                # Utility packages
                sudo apt install -y gdb libbz2-dev liblzma-dev libsqlite3-dev libssl-dev lzma lzma-dev zlib1g-dev liblz4-dev liblzo2-dev

            """
        ),
        dedent(
            """
                clang++ -std=c++20 -Wall -Wextra -O2 -DONLINE_JUDGE -DATCODER -mtune=native -march=native -fconstexpr-depth=2147483647 -fconstexpr-steps=2147483647 -I/opt/boost/clang/include -L/opt/boost/clang/lib -I/opt/ac-library -I/usr/include/eigen3 -fuse-ld=lld -o ./a.out ./Main.cpp
            """
        ),
        "a.out",
        {},
        process(
            """
                ./a.out
            """,
        ),
    ),
    Language(
        "LLVM IR",
        "LLVM IR",
        "Clang",
        "16.0.6",
        "Main.ll",
        dedent(
            """
                cd /tmp

                # LLVM from llvm official apt repository
                sudo apt update
                sudo apt install -y lsb-release wget software-properties-common gnupg
                wget https://apt.llvm.org/llvm.sh -O llvm.sh

                # Automate add-apt-repository
                sed -i.bak -e 's/^add-apt-repository /&-y /' llvm.sh

                chmod +x llvm.sh
                sudo ./llvm.sh 16
            """
        ),
        dedent(
            """
                clang-16 -O2 -o ./a.out ./Main.ll
            """
        ),
        "a.out",
        {},
        process(
            """
                ./a.out
            """,
        ),
    ),
    Language(
        "Emacs Lisp (Byte Compile)",
        "Emacs Lisp",
        "GNU Emacs",
        "28.2",
        "Main.el",
        dedent(
            """
                # Install Emacs
                sudo apt-get update
                sudo apt-get install -y autoconf build-essential libgccjit-12-dev libgnutls28-dev libtinfo-dev pkg-config texinfo wget zlib1g-dev
                cd /tmp
                wget https://ftp.gnu.org/gnu/emacs/emacs-28.2.tar.gz
                tar xvf emacs-28.2.tar.gz
                cd emacs-28.2
                ./configure --with-native-compilation
                make bootstrap NATIVE_FULL_AOT=1
                sudo make install
                # Install libraries
                emacs --batch --eval \"\\
                (progn
                  (package-initialize)
                  (add-to-list 'package-archives '(\\\"melpa\\\" . \\\"https://melpa.org/packages/\\\") t)
                  (package-refresh-contents)
                  (mapc #'package-install
                        '(dash
                          ht
                          recur
                          s)))\"
                emacs --batch --eval \"(package-initialize)\" -f batch-byte-compile ~/.emacs.d/elpa/**/*.el
            """
        ),
        dedent(
            """
                emacs --batch -f package-initialize -f batch-byte-compile Main.el
            """
        ),
        "Main.elc",
        {},
        process(
            """
                emacs
                --batch
                -f
                package-initialize
                -l
                Main.elc
            """,
        ),
    ),
    Language(
        "Factor",
        "Factor",
        "Factor",
        "0.98",
        "Main.factor",
        dedent(
            """
                cd /tmp
                wget http://downloads.factorcode.org/releases/0.98/factor-linux-x86-64-0.98.tar.gz
                sudo tar -C /opt -xzf factor-linux-x86-64-0.98.tar.gz
            """
        ),
        dedent(
            """

            """
        ),
        "",
        {},
        process(
            """
                /opt/factor/factor
                Main.factor
            """,
        ),
    ),
    Language(
        "Mercury",
        "Mercury",
        "Mercury",
        "22.01.6",
        "main.m",
        dedent(
            """
                sudo apt update
                sudo apt install -y flex bison
                cd /tmp
                wget https://dl.mercurylang.org/release/mercury-srcdist-22.01.6.tar.gz
                tar xf mercury-srcdist-22.01.6.tar.gz
                cd mercury-srcdist-22.01.6/
                ./configure --prefix=/usr/local --disable-most-grades
                make
                sudo make install
            """
        ),
        dedent(
            """
                mmc -o a.out -O 5 main
            """
        ),
        "a.out",
        {},
        process(
            """
                ./a.out
            """,
        ),
    ),
    Language(
        "Seed7",
        "Seed7",
        "Seed7",
        "3.2.1",
        "Main.sd7",
        dedent(
            """
                sudo apt install -y libx11-dev
                cd /tmp
                SEED7_RELEASE=05_20230709
                wget -O seed7_$SEED7_RELEASE.tgz https://downloads.sourceforge.net/project/seed7/seed7/seed7_$SEED7_RELEASE/seed7_$SEED7_RELEASE.tgz
                tar -C \"$HOME\" -xf seed7_$SEED7_RELEASE.tgz
                cd \"$HOME\"/seed7/src
                make depend
                make
                make s7c
                sudo make install
            """
        ),
        dedent(
            """
                s7c -O2 -oc3 Main.sd7 1>&2
            """
        ),
        "Main",
        {},
        process(
            """
                ./Main
            """,
        ),
    ),
    Language(
        "Emacs Lisp (No Compile)",
        "Emacs Lisp",
        "GNU Emacs",
        "28.2",
        "Main.el",
        dedent(
            """
                # Install Emacs
                sudo apt-get update
                sudo apt-get install -y autoconf build-essential libgccjit-12-dev libgnutls28-dev libtinfo-dev pkg-config texinfo wget zlib1g-dev
                cd /tmp
                wget https://ftp.gnu.org/gnu/emacs/emacs-28.2.tar.gz
                tar xvf emacs-28.2.tar.gz
                cd emacs-28.2
                ./configure --with-native-compilation
                make bootstrap NATIVE_FULL_AOT=1
                sudo make install
                # Install libraries
                emacs --batch --eval \"\\
                (progn
                  (package-initialize)
                  (add-to-list 'package-archives '(\\\"melpa\\\" . \\\"https://melpa.org/packages/\\\") t)
                  (package-refresh-contents)
                  (mapc #'package-install
                        '(dash
                          ht
                          recur
                          s)))\"
                emacs --batch --eval \"(package-initialize)\" -f batch-byte-compile ~/.emacs.d/elpa/**/*.el
            """
        ),
        dedent(
            """

            """
        ),
        "",
        {},
        process(
            """
                emacs
                --batch
                -f
                package-initialize
                -l
                Main.el
            """,
        ),
    ),
    Language(
        "Unison",
        "Unison",
        "Unison",
        "M5b",
        "main.u",
        dedent(
            """
                sudo apt update
                sudo apt install -y ansifilter
                pushd /tmp
                wget https://github.com/unisonweb/unison/releases/download/release/M5b/ucm-linux.tar.gz
                sudo mkdir /opt/ucm
                sudo tar -C /opt/ucm -xf ucm-linux.tar.gz
                popd
                echo project.create | /opt/ucm/ucm
            """
        ),
        dedent(
            """
                sh -c \"echo 'load main.u'; sleep 5 ; echo 'add'\" | /opt/ucm/ucm > compile-out
                echo 'compile main main' | /opt/ucm/ucm
                if [ ! -f main.uc ]; then
                  cat compile-out | ansifilter 1>&2
                fi
            """
        ),
        "main.uc",
        {},
        process(
            """
                /opt/ucm/ucm
                run.compiled
                main.uc
            """,
        ),
    ),
    Language(
        "COBOL",
        "COBOL",
        "GnuCOBOL(Fixed)",
        "3.1.2",
        "Main.cbl",
        dedent(
            """
                sudo apt install gnucobol3
            """
        ),
        dedent(
            """
                cobc -x -O2 -o ./a.out ./Main.cbl
            """
        ),
        "a.out",
        {},
        process(
            """
                ./a.out
            """,
        ),
    ),
]
