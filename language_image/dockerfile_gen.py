from pathlib import Path
from textwrap import dedent

from atcoder_env.languages import languages

dockerfile_head = """\
# syntax=docker/dockerfile:1.4.1

# generated by dockerfile_gen.py

# DOCKER_BUILDKIT=1 docker build ...

FROM ubuntu:23.04

SHELL ["/bin/bash", "-c"]

RUN apt-get update

RUN apt install sudo adduser

RUN adduser runner && \\
    echo '%runner ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers
USER runner

RUN sudo ln -sf /usr/share/zoneinfo/Asia/Tokyo /etc/localtime
ENV DEBIAN_FRONTEND=noninteractive DEBCONF_NONINTERACTIVE_SEEN=true

RUN sudo apt install -y wget unzip xz-utils curl

RUN sudo mkdir /judge --mode=777

WORKDIR /judge

"""

dockerfile_tail = """

COPY --chmod=777 run.bash /tmp/run.bash
"""

run_bash_temp = """\
#!/bin/bash

action=$1

if [[ $action == "compile" ]]; then
  {compile_command}
elif [[ $action == "check" ]]; then
  if [[ ! -e {object_path} ]]; then
    echo 1
  else
    echo 0
  fi
elif [[ $action == "run" ]]; then
  {run_command}
  if [[ $? -ne 0 ]]; then
    echo "Run failed"
    exit 1
  fi
else
  echo 'Unknown action "'$action'"'
  exit 1
fi
"""

for lang in languages:
    dockerfile = [dockerfile_head]

    cmd = lang.install_command

    if lang.name == "C++ 20" and lang.processor_name == "gcc":
        cmd = dedent(
            """\
            sudo apt install -y g++-12

            #GMP
            sudo apt install -y libgmp3-dev
            
            cd /tmp
            
            # ac library
            sudo mkdir /opt/ac-library
            wget https://github.com/atcoder/ac-library/releases/download/v1.5.1/ac-library.zip -O ac-library.zip
            sudo unzip /tmp/ac-library.zip -d /opt/ac-library
            
            # boost
            sudo apt install -y build-essential
            wget https://boostorg.jfrog.io/artifactory/main/release/1.82.0/source/boost_1_82_0.tar.gz -O boost_1_82_0.tar.gz
            tar xf boost_1_82_0.tar.gz
            cd boost_1_82_0
            ./bootstrap.sh --with-toolset=gcc --without-libraries=mpi,graph_parallel
            ./b2 -j3 toolset=gcc variant=release link=static runtime-link=static cxxflags="-std=c++20" stage
            sudo ./b2 -j3 toolset=gcc variant=release link=static runtime-link=static cxxflags="-std=c++20" --prefix=/opt/boost/gcc install
            
            
            #Eigen
            sudo apt install -y libeigen3-dev=3.4.0-4
            """
        )

    elif lang.name == "C++ 23" and lang.processor_name == "gcc":
        cmd = dedent(
            """\
            sudo apt install -y g++-12
            
            #GMP
            sudo apt install -y libgmp3-dev
            
            cd /tmp
            
            # ac library
            sudo mkdir /opt/ac-library
            wget https://github.com/atcoder/ac-library/releases/download/v1.5.1/ac-library.zip -O ac-library.zip
            sudo unzip /tmp/ac-library.zip -d /opt/ac-library
            
            # boost
            sudo apt install -y build-essential
            wget https://boostorg.jfrog.io/artifactory/main/release/1.82.0/source/boost_1_82_0.tar.gz -O boost_1_82_0.tar.gz
            tar xf boost_1_82_0.tar.gz
            cd boost_1_82_0
            ./bootstrap.sh --with-toolset=gcc --without-libraries=mpi,graph_parallel
            ./b2 -j3 toolset=gcc variant=release link=static runtime-link=static cxxflags="-std=c++2b" stage
            sudo ./b2 -j3 toolset=gcc variant=release link=static runtime-link=static cxxflags="-std=c++2b" --prefix=/opt/boost/gcc install

            #Eigen
            sudo apt install -y libeigen3-dev=3.4.0-4
            """
        )

    elif lang.processor_name == "OpenJDK":
        cmd = "sudo apt install -y openjdk-17-jdk"

    elif lang.processor_name == "GNU R":
        cmd = dedent(
            """\
            sudo apt install -y r-base r-base-dev
            sudo Rscript -e "install.packages(c('Rcpp', 'stringr', 'purrr', 'magrittr', 'sets', 'dequer', 'zeallot', 'lubridate', 'readr'))"
            """
        )

    elif lang.processor_name == "PyPy":
        cmd = "sudo apt install -y python3\n" + cmd

    elif lang.processor_name == "swift":
        cmd = dedent(
            """\
            # 公式手順を参考にしています。
            # 量が多いので, 可能であれば./setup.shなどで実行することをお勧めします。
            # 手元のDocker(M1 Mac上, Ubuntu(Intel CPU)上)のubuntu:22.10環境で確認済み。
            
            # References
            # https://www.swift.org/getting-started/ 
            # https://www.swift.org/download/
            # https://github.com/apple/swift-docker/blob/59e3cc2532e57bb75b406bb9c589b62bd12edd5c/5.7/ubuntu/22.04/Dockerfile
            
            sudo apt update
            export DEBIAN_FRONTEND=noninteractive
            
            # don't use apt!
            sudo apt-get install -y \\
                binutils \\
                git \\
                gnupg2 \\
                libc6-dev \\
                libcurl4-openssl-dev \\
                libedit2 \\
                libgcc-9-dev \\
                libpython3.8 \\
                libsqlite3-0 \\
                libstdc++-9-dev \\
                libxml2-dev \\
                libz3-dev \\
                pkg-config \\
                tzdata \\
                unzip \\
                zlib1g-dev \\
                libncurses6
                
            # 依存packagesの公式インストール方法だが、libpython3.8がデフォルトでubuntu22ではapt repositoryに存在しない。
            # aptだと一つでも存在しなかったらエラーで強制終了するため、apt-getにしている。libpython3.8の行を消してもいいかも。
            # libpython3.8はなくても問題ないことを確認済み。
            
            export SWIFT_PLATFORM=ubuntu22.04
            export SWIFT_VERSION_NUMBER=5.8.1
            export SWIFT_BRANCH=swift-$SWIFT_VERSION_NUMBER-release
            export SWIFT_VERSION=swift-$SWIFT_VERSION_NUMBER-RELEASE
            export SWIFT_WEBROOT=https://download.swift.org
            
            # check architecture
            # CPUなど低レイヤーの環境が不明のため。
            set -e
            ARCH_NAME="$(dpkg --print-architecture)"
            url=
            case "${ARCH_NAME##*-}" in
            'amd64')
                OS_ARCH_SUFFIX=''
                ;;
            'arm64')
                OS_ARCH_SUFFIX='-aarch64'
                ;;
            *)
                echo >&2 "error: unsupported architecture: '$ARCH_NAME'"
                exit 1
                ;;
            esac
            
            export SWIFT_WEBDIR="$SWIFT_WEBROOT/$SWIFT_BRANCH/$(echo $SWIFT_PLATFORM | tr -d .)$OS_ARCH_SUFFIX"
            export FILE_NAME="$SWIFT_VERSION-$SWIFT_PLATFORM$OS_ARCH_SUFFIX"
            export SWIFT_BIN_URL="$SWIFT_WEBDIR/$SWIFT_VERSION/$FILE_NAME.tar.gz"
            
            sudo apt install -y wget
            
            wget -O - "$SWIFT_BIN_URL" | sudo tar -xzC /usr/local/ \
                --transform=s/$FILE_NAME/swift/
            
            # echo 'export PATH=/usr/local/swift/usr/bin:$PATH' >>~/.bashrc
            
            # verify swift command.
            # source ~/.bashrc
            export PATH=/usr/local/swift/usr/bin:$PATH
            swift --version
            # 正しく表示されればswiftcも使えます。
            
            # create project
            # mkdir swift
            # cd swift
            swift package init --name Main --type executable
            cat << 'EOF' > Package.swift
            // swift-tools-version: 5.8.1
            import PackageDescription
            
            let package = Package(
              name: "Main",
              dependencies: [
                .package(
                  url: "https://github.com/apple/swift-collections.git",
                  .upToNextMajor(from: "1.0.0") // or `.upToNextMinor
                ),
                .package(url: "https://github.com/apple/swift-algorithms.git", .upToNextMajor(from: "1.0.0"))
              ],
              targets: [
                .executableTarget(
                  name: "Main",
                  dependencies: [
                    .product(name: "Collections", package: "swift-collections"),
                    .product(name: "Algorithms", package: "swift-algorithms")
                  ],
                  path: "Sources"
                )
              ]
            )
            EOF
            # install library
            swift build -Xswiftc -O -Xlinker -lm -c release
            rm .build/release/Main
            """
        )

    elif lang.processor_name == "php":
        # php don't support not-LTS version
        dockerfile[0] = (
            dockerfile[0]
            .replace("23.04", "22.04")
            .replace("RUN apt install sudo adduser", "RUN apt install -y sudo adduser")
        )

    elif lang.display_name == "C" and lang.processor_name == "gcc":
        cmd = "sudo apt install -y gcc-12"

    elif lang.processor_name == "ruby":
        cmd = dedent(
            """\
            sudo apt-get install -y autoconf bison patch build-essential rustc libssl-dev libyaml-dev libreadline6-dev zlib1g-dev libgmp-dev libncurses5-dev libffi-dev libgdbm6 libgdbm-dev libdb-dev uuid-dev make
            cd /tmp
            wget https://cache.ruby-lang.org/pub/ruby/3.2/ruby-3.2.2.tar.gz
            tar -xf ruby-3.2.2.tar.gz
            cd ruby-3.2.2
            export cflags=-fno-stack-clash-protection
            ./configure
            make
            sudo make install
            # 以下、Library のインストール
            sudo gem install rbtree
            sudo gem install ac-library-rb
            sudo gem install faster_prime
            sudo gem install sorted_set
            sudo gem install numo-narray
            sudo gem install polars-df
            """
        )

    elif lang.processor_name == "bf":
        dockerfile[0] = (
            dockerfile[0]
            .replace("23.04", "22.04")
            .replace("RUN apt install sudo adduser", "RUN apt install -y sudo adduser")
        )
        cmd = "sudo apt install -y bf"

    elif lang.processor_name == "koka":
        cmd = "sudo apt install -y gcc make\n" + cmd

    elif lang.processor_name == "LuaJIT":
        cmd = "sudo apt install -y make\n" + cmd

    elif lang.processor_name == "GnuCOBOL":
        cmd = "sudo apt install -y gnucobol3"

    elif lang.processor_name == "perl ":
        cmd = "sudo apt install -y perl"

    elif lang.processor_name == "Rakudo":
        cmd = dedent(
            """\
            curl -1sLf 'https://dl.cloudsmith.io/public/nxadm-pkgs/rakudo-pkg/setup.deb.sh' | sudo -E bash
            sudo apt update
            sudo apt install -y rakudo-pkg
            """
        )

    elif lang.processor_name == "NASM":
        cmd = "sudo apt install -y nasm build-essential"

    elif lang.processor_name == "fpc":
        cmd = "sudo apt install -y fp-compiler-3.2.2"

    elif lang.processor_name == "Lua":
        cmd = "sudo apt install -y make gcc\n" + cmd

    elif lang.processor_name == "SWI-Prolog":
        cmd = dedent(
            """\
            sudo apt-get install -y software-properties-common
            sudo apt-add-repository ppa:swi-prolog/stable
            sudo apt-get update
            sudo apt-get install -y swi-prolog
            """
        )

    elif lang.processor_name == "Deno" and lang.display_name == "TypeScript":
        cmd = dedent(
            """\
            sudo apt-get install unzip
            curl -fsSL https://deno.land/install.sh | sh -s v1.35.1
            export NO_COLOR=true
            export DENO_NO_UPDATE_CHECK=1
            export PATH=$PATH:/home/runner/.deno/bin
            
            deno cache npm:tstl@2.5.13
            deno cache npm:mathjs@11.8.2
            # deno_stdをキャッシュに入れておく。
            cd /tmp
            wget https://github.com/denoland/deno_std/archive/refs/tags/0.194.0.tar.gz
            tar xf 0.194.0.tar.gz
            find deno_std-0.194.0 -name "*.ts" >> stdfiles
            find deno_std-0.194.0 -name "*.js" >> stdfiles
            sed -i -e "s%deno_std-\(.*\)%import 'https://deno.land/std@\\1';%" stdfiles
            deno cache stdfiles
            """
        )

    elif lang.processor_name == "Erlang":
        cmd = dedent(
            """\
            sudo apt install -y gcc

            # x86_64アーキテクチャを前提にしています
            
            sudo apt update
            
            # asdf
            
            sudo apt install git curl git -y
            git clone https://github.com/asdf-vm/asdf.git ~/.asdf --branch v0.11.2
            . "$HOME/.asdf/asdf.sh"
            . "$HOME/.asdf/completions/asdf.bash"
            
            # Erlang
            
            sudo apt -y install build-essential autoconf m4 libncurses5-dev libwxgtk3.2-dev libgl1-mesa-dev libglu1-mesa-dev libpng-dev libssh-dev unixodbc-dev xsltproc fop libxml2-utils libncurses-dev openjdk-11-jdk libwxgtk-webview3.2-dev erlang-dev erlang-xmerl erlang-parsetools erlang-os-mon inotify-tools
            
            ## ここでサービスを再起動するように言われるかもしれない
            
            asdf plugin-add erlang https://github.com/asdf-vm/asdf-erlang.git
            asdf install erlang 26.0.2
            asdf global erlang 26.0.2
            """
        )

    elif lang.processor_name == "Mercury":
        cmd = "sudo apt install -y make\n" + cmd

    elif lang.processor_name == "Seed7":
        cmd = "sudo apt install -y make\n" + cmd

    elif lang.processor_name == "GnuCOBOL(Fixed)":
        cmd = "sudo apt install -y gnucobol3"

    dockerfile.append("RUN <<EOF")
    dockerfile.append(cmd.replace("EOF", "_eof_"))
    dockerfile.append("EOF\n")

    dockerfile.append(dockerfile_tail)

    run_bash = run_bash_temp.format(
        compile_command=lang.compilation_command,
        object_path=lang.object_file,
        run_command=" ".join(lang.execution_command),
    )

    (Path(__file__).parent / "images" / lang.id).mkdir(exist_ok=True)

    with open(Path(__file__).parent / "images" / lang.id / "Dockerfile", "w") as f:
        f.write("\n".join(dockerfile))

    with open(Path(__file__).parent / "images" / lang.id / "run.bash", "w") as f:
        f.write(run_bash)
