# syntax=docker/dockerfile:1.4.1

# generated by dockerfile_gen.py

# DOCKER_BUILDKIT=1 docker build ...

FROM ubuntu:23.04

SHELL ["/bin/bash", "-c"]

RUN apt-get update

RUN apt install sudo adduser

RUN adduser runner && \
    echo '%runner ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers
USER runner

RUN sudo ln -sf /usr/share/zoneinfo/Asia/Tokyo /etc/localtime
ENV DEBIAN_FRONTEND=noninteractive DEBCONF_NONINTERACTIVE_SEEN=true

RUN sudo apt install -y wget unzip xz-utils curl

RUN sudo mkdir /judge --mode=777

WORKDIR /judge


RUN <<EOF

cd /tmp

# LLVM from llvm official apt repository
sudo apt install -y lsb-release wget software-properties-common gnupg
wget https://apt.llvm.org/llvm.sh -O llvm.sh
# Automate add-apt-repository
sed -i.bak -e 's/^add-apt-repository /&-y /' llvm.sh
chmod +x llvm.sh
sudo ./llvm.sh 16
sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-16 10
sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-16 10

# ac library
sudo mkdir /opt/ac-library
wget https://github.com/atcoder/ac-library/releases/download/v1.5.1/ac-library.zip -O ac-library.zip
sudo unzip ac-library.zip -d /opt/ac-library

# boost
wget https://boostorg.jfrog.io/artifactory/main/release/1.82.0/source/boost_1_82_0.tar.gz -O boost_1_82_0.tar.gz
tar xf boost_1_82_0.tar.gz
cd boost_1_82_0
./bootstrap.sh --with-toolset=clang --without-libraries=mpi,graph_parallel
./b2 -j3 toolset=clang variant=release link=static runtime-link=static cxxflags="-std=c++2b" stage
sudo ./b2 -j3 toolset=clang variant=release link=static runtime-link=static cxxflags="-std=c++2b" --prefix=/opt/boost/clang install

cd /tmp

# GMP
sudo apt install -y libgmp3-dev

# Eigen
sudo apt install -y libeigen3-dev

# Z3。 llvmインストール時に自動で入るようですが念のため。
sudo apt install -y libz3-4 libz3-dev

# Utility packages
sudo apt install -y gdb libbz2-dev liblzma-dev libsqlite3-dev libssl-dev lzma lzma-dev zlib1g-dev liblz4-dev liblzo2-dev


EOF



COPY --chmod=777 run.bash /tmp/run.bash
