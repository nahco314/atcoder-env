from pathlib import Path
from textwrap import dedent, indent

import gspread
from google.oauth2.service_account import Credentials

KEY_JSON_PATH = "/home/nahco314/.keys/just-shell-403111-452bdcab11ea.json"
SPREADSHEET_URL = "https://docs.google.com/spreadsheets/d/1XLvx-DctfzFI7d9ylA6vEt158G5aJkI96q3OxBzqovM/edit#gid=0"

scopes = [
    "https://www.googleapis.com/auth/spreadsheets",
    "https://www.googleapis.com/auth/drive",
]


credentials = Credentials.from_service_account_file(KEY_JSON_PATH, scopes=scopes)

gc = gspread.authorize(credentials)


spreadsheet = gc.open_by_url(SPREADSHEET_URL)
s = spreadsheet.get_worksheet(3).get_all_values()

defines_head = """\
\"\"\"
generated by codegen.py
\"\"\"

from dataclasses import dataclass
from textwrap import dedent
from typing import Optional


@dataclass
class Language:
    name: str
    display_name: str
    processor_name: str
    version: str
    filename: str
    install_command: str
    compilation_command: str
    object_file: Optional[str]
    environment: dict[str, str]
    execution_command: list[str]
    
    @property
    def id(self) -> str:
        return (
            f"{self.name} {self.processor_name} {self.version}".replace(" ", "-")
            .replace("/", "-")
            .lower()
        )

    @property
    def display_id(self) -> str:
        return f"{self.display_name} ({self.processor_name} {self.version})"


def strip(string: str) -> str:
    return string.strip()


def process(raw_command: str) -> list[str]:
    return dedent(raw_command)[1:-1].splitlines()


def get_language(name: str) -> Language:
    for language in languages:
        if language.name == name:
            return language
    raise ValueError(f'Language "{name}" not found')

"""

defines = [defines_head, "languages = ["]

is_ok = 0
language = 5
display_language = 6
processor = 7
version = 8
library = 9
filename = 10
install_command = 11
compilation_command = 12
object_file = 13
environment = 14
execution_command = 15
license_url = 16

for line in s[1:]:
    if line[is_ok] != "o":
        continue

    if line[display_language] == "D" and line[processor] != "DMD":
        continue

    defines.append(" " * 4 + "Language(")
    defines.append(" " * 8 + '"' + line[language] + '",')
    defines.append(" " * 8 + '"' + line[display_language] + '",')
    defines.append(" " * 8 + '"' + line[processor] + '",')
    defines.append(" " * 8 + '"' + line[version] + '",')
    defines.append(" " * 8 + '"' + line[filename] + '",')

    defines.append(" " * 8 + "dedent(")
    defines.append(" " * 12 + '"""')
    defines.append(
        indent(
            line[install_command].replace("\\", "\\\\").replace('"', '\\"'), " " * 16
        )
    )
    defines.append(" " * 12 + '"""')
    defines.append(" " * 8 + "),")

    defines.append(" " * 8 + "dedent(")
    defines.append(" " * 12 + '"""')
    defines.append(
        indent(
            line[compilation_command].replace("\\", "\\\\").replace('"', '\\"'),
            " " * 16,
        )
    )
    defines.append(" " * 12 + '"""')
    defines.append(" " * 8 + "),")

    defines.append(" " * 8 + '"' + line[object_file] + '",')

    if line[environment] != "":
        defines.append(" " * 8 + "{")
        for env_line in line[environment].splitlines():
            if env_line == "":
                continue
            key, value = env_line.split("=", 1)
            defines.append(" " * 12 + '"' + key + '": "' + value + '",')
        defines.append(" " * 8 + "},")
    else:
        defines.append(" " * 8 + "{},")

    defines.append(" " * 8 + "process(")
    defines.append(" " * 12 + '"""')
    defines.append(
        indent(
            line[execution_command].replace("\\", "\\\\").replace('"', '\\"'), " " * 16
        )
    )
    defines.append(" " * 12 + '""",')
    defines.append(" " * 8 + "),")

    defines.append(" " * 4 + "),")

defines.append("]\n")

print("\n".join(defines), end="")
